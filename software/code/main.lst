ARM GAS  /tmp/ccwNEFwB.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1	@ Tag_ABI_FP_denormal
   5              		.eabi_attribute 21, 1	@ Tag_ABI_FP_exceptions
   6              		.eabi_attribute 23, 3	@ Tag_ABI_FP_number_model
   7              		.eabi_attribute 24, 1	@ Tag_ABI_align8_needed
   8              		.eabi_attribute 25, 1	@ Tag_ABI_align8_preserved
   9              		.eabi_attribute 26, 1	@ Tag_ABI_enum_size
  10              		.eabi_attribute 30, 6	@ Tag_ABI_optimization_goals
  11              		.eabi_attribute 34, 0	@ Tag_CPU_unaligned_access
  12              		.eabi_attribute 18, 4	@ Tag_ABI_PCS_wchar_t
  13              		.file	"main.c"
  14              	@ GNU C11 (GNU Tools for ARM Embedded Processors) version 5.4.1 20160919 (release) [ARM/embedded-5-
  15              	@	compiled by GNU C version 4.7.4, GMP version 4.3.2, MPFR version 2.4.2, MPC version 0.8.1
  16              	@ GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
  17              	@ options passed:  -I . -I ./inc -imultilib armv6-m
  18              	@ -iprefix /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../lib/gcc/arm-none-eabi/5.4.1/
  19              	@ -isysroot /srv/gcc-arm-none-eabi-5_4-2016q3/bin/../arm-none-eabi
  20              	@ -MD code/main.d -MF .dep/main.o.d -MP -MQ code/main.o -D__USES_INITFINI__
  21              	@ -D RUN_FROM_FLASH=1 code/main.c -mcpu=cortex-m0 -mthumb
  22              	@ -auxbase-strip code/main.o -gdwarf-2 -O0 -Wall -Wstrict-prototypes
  23              	@ -fomit-frame-pointer -fverbose-asm
  24              	@ options enabled:  -faggressive-loop-optimizations -fauto-inc-dec
  25              	@ -fchkp-check-incomplete-type -fchkp-check-read -fchkp-check-write
  26              	@ -fchkp-instrument-calls -fchkp-narrow-bounds -fchkp-optimize
  27              	@ -fchkp-store-bounds -fchkp-use-static-bounds
  28              	@ -fchkp-use-static-const-bounds -fchkp-use-wrappers -fcommon
  29              	@ -fdelete-null-pointer-checks -fdwarf2-cfi-asm -fearly-inlining
  30              	@ -feliminate-unused-debug-types -ffunction-cse -fgcse-lm -fgnu-runtime
  31              	@ -fgnu-unique -fident -finline-atomics -fira-hoist-pressure
  32              	@ -fira-share-save-slots -fira-share-spill-slots -fivopts
  33              	@ -fkeep-static-consts -fleading-underscore -flifetime-dse
  34              	@ -flto-odr-type-merging -fmath-errno -fmerge-debug-strings
  35              	@ -fomit-frame-pointer -fpeephole -fprefetch-loop-arrays
  36              	@ -freg-struct-return -fsched-critical-path-heuristic
  37              	@ -fsched-dep-count-heuristic -fsched-group-heuristic -fsched-interblock
  38              	@ -fsched-last-insn-heuristic -fsched-rank-heuristic -fsched-spec
  39              	@ -fsched-spec-insn-heuristic -fsched-stalled-insns-dep
  40              	@ -fsemantic-interposition -fshow-column -fsigned-zeros
  41              	@ -fsplit-ivs-in-unroller -fstdarg-opt -fstrict-volatile-bitfields
  42              	@ -fsync-libcalls -ftrapping-math -ftree-coalesce-vars -ftree-cselim
  43              	@ -ftree-forwprop -ftree-loop-if-convert -ftree-loop-im -ftree-loop-ivcanon
  44              	@ -ftree-loop-optimize -ftree-parallelize-loops= -ftree-phiprop
  45              	@ -ftree-reassoc -ftree-scev-cprop -funit-at-a-time -fverbose-asm
  46              	@ -fzero-initialized-in-bss -mlittle-endian -mpic-data-is-text-relative
  47              	@ -msched-prolog -mthumb -mvectorize-with-neon-quad
  48              	
  49              		.text
  50              	.Ltext0:
  51              		.cfi_sections	.debug_frame
  52              		.global	BUTTONS_REGS
  53              		.data
  54              		.align	2
  55              		.type	BUTTONS_REGS, %object
  56              		.size	BUTTONS_REGS, 4
  57              	BUTTONS_REGS:
ARM GAS  /tmp/ccwNEFwB.s 			page 2


  58 0000 00000040 		.word	1073741824
  59              		.global	SENSORS_REGS
  60              		.align	2
  61              		.type	SENSORS_REGS, %object
  62              		.size	SENSORS_REGS, 4
  63              	SENSORS_REGS:
  64 0004 00000050 		.word	1342177280
  65              		.global	LED_REGS
  66              		.align	2
  67              		.type	LED_REGS, %object
  68              		.size	LED_REGS, 4
  69              	LED_REGS:
  70 0008 00000060 		.word	1610612736
  71              		.text
  72              		.align	2
  73              		.global	write_led
  74              		.code	16
  75              		.thumb_func
  76              		.type	write_led, %function
  77              	write_led:
  78              	.LFB0:
  79              		.file 1 "code/main.c"
   1:code/main.c   **** #define __MAIN_C__
   2:code/main.c   **** //?
   3:code/main.c   **** #include <stdint.h>
   4:code/main.c   **** #include <stdbool.h>
   5:code/main.c   **** 
   6:code/main.c   **** // Define the raw base address values for the i/o devices
   7:code/main.c   **** 
   8:code/main.c   **** #define AHB_BUTTONS_BASE                          0x40000000
   9:code/main.c   **** #define AHB_SENSORS_BASE                          0x50000000
  10:code/main.c   **** #define AHB_LED_BASE                              0x60000000
  11:code/main.c   **** 
  12:code/main.c   **** // Define pointers with correct type for access to 32-bit i/o devices
  13:code/main.c   **** //
  14:code/main.c   **** // The locations in the devices can then be accessed as:
  15:code/main.c   **** //    IPORT_REGS[0]
  16:code/main.c   **** //    OPORT_REGS[0]
  17:code/main.c   **** //
  18:code/main.c   **** volatile uint32_t* BUTTONS_REGS = (volatile uint32_t*) AHB_BUTTONS_BASE;
  19:code/main.c   **** volatile uint32_t* SENSORS_REGS = (volatile uint32_t*) AHB_SENSORS_BASE;
  20:code/main.c   **** volatile uint32_t* LED_REGS = (volatile uint32_t*) AHB_LED_BASE;
  21:code/main.c   **** 
  22:code/main.c   **** #include <stdint.h>
  23:code/main.c   **** 
  24:code/main.c   **** //////////////////////////////////////////////////////////////////
  25:code/main.c   **** // Functions provided to access i/o devices
  26:code/main.c   **** //////////////////////////////////////////////////////////////////
  27:code/main.c   **** 
  28:code/main.c   **** void write_led(uint32_t value) {
  80              		.loc 1 28 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 8
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85 0000 82B0     		sub	sp, sp, #8	@,,
  86              	.LCFI0:
ARM GAS  /tmp/ccwNEFwB.s 			page 3


  87              		.cfi_def_cfa_offset 8
  88 0002 0190     		str	r0, [sp, #4]	@ value, value
  29:code/main.c   **** 
  30:code/main.c   ****   LED_REGS[0] = value;
  89              		.loc 1 30 0
  90 0004 034B     		ldr	r3, .L2	@ tmp111,
  91 0006 1B68     		ldr	r3, [r3]	@ D.4592, LED_REGS
  92 0008 019A     		ldr	r2, [sp, #4]	@ tmp112, value
  93 000a 1A60     		str	r2, [r3]	@ tmp112, *_2
  31:code/main.c   **** 
  32:code/main.c   **** }
  94              		.loc 1 32 0
  95 000c C046     		nop
  96 000e 02B0     		add	sp, sp, #8	@,,
  97              		@ sp needed	@
  98 0010 7047     		bx	lr
  99              	.L3:
 100 0012 C046     		.align	2
 101              	.L2:
 102 0014 00000000 		.word	LED_REGS
 103              		.cfi_endproc
 104              	.LFE0:
 105              		.size	write_led, .-write_led
 106              		.align	2
 107              		.global	read_nFork
 108              		.code	16
 109              		.thumb_func
 110              		.type	read_nFork, %function
 111              	read_nFork:
 112              	.LFB1:
  33:code/main.c   **** 
  34:code/main.c   **** uint32_t read_nFork(void) {
 113              		.loc 1 34 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
  35:code/main.c   ****   
  36:code/main.c   ****   return SENSORS_REGS[0];
 118              		.loc 1 36 0
 119 0018 024B     		ldr	r3, .L6	@ tmp113,
 120 001a 1B68     		ldr	r3, [r3]	@ D.4593, SENSORS_REGS
 121 001c 1B68     		ldr	r3, [r3]	@ D.4594, *_2
  37:code/main.c   **** } 
 122              		.loc 1 37 0
 123 001e 1800     		movs	r0, r3	@, <retval>
 124              		@ sp needed	@
 125 0020 7047     		bx	lr
 126              	.L7:
 127 0022 C046     		.align	2
 128              	.L6:
 129 0024 00000000 		.word	SENSORS_REGS
 130              		.cfi_endproc
 131              	.LFE1:
 132              		.size	read_nFork, .-read_nFork
 133              		.align	2
 134              		.global	read_nCrank
ARM GAS  /tmp/ccwNEFwB.s 			page 4


 135              		.code	16
 136              		.thumb_func
 137              		.type	read_nCrank, %function
 138              	read_nCrank:
 139              	.LFB2:
  38:code/main.c   **** 
  39:code/main.c   **** uint32_t read_nCrank(void) {
 140              		.loc 1 39 0
 141              		.cfi_startproc
 142              		@ args = 0, pretend = 0, frame = 0
 143              		@ frame_needed = 0, uses_anonymous_args = 0
 144              		@ link register save eliminated.
  40:code/main.c   ****   
  41:code/main.c   ****   return SENSORS_REGS[1];
 145              		.loc 1 41 0
 146 0028 024B     		ldr	r3, .L10	@ tmp114,
 147 002a 1B68     		ldr	r3, [r3]	@ D.4595, SENSORS_REGS
 148 002c 0433     		adds	r3, r3, #4	@ D.4595,
 149 002e 1B68     		ldr	r3, [r3]	@ D.4596, *_3
  42:code/main.c   **** } 
 150              		.loc 1 42 0
 151 0030 1800     		movs	r0, r3	@, <retval>
 152              		@ sp needed	@
 153 0032 7047     		bx	lr
 154              	.L11:
 155              		.align	2
 156              	.L10:
 157 0034 00000000 		.word	SENSORS_REGS
 158              		.cfi_endproc
 159              	.LFE2:
 160              		.size	read_nCrank, .-read_nCrank
 161              		.align	2
 162              		.global	read_fork_cnt
 163              		.code	16
 164              		.thumb_func
 165              		.type	read_fork_cnt, %function
 166              	read_fork_cnt:
 167              	.LFB3:
  43:code/main.c   **** 
  44:code/main.c   **** uint32_t read_fork_cnt(void) {
 168              		.loc 1 44 0
 169              		.cfi_startproc
 170              		@ args = 0, pretend = 0, frame = 0
 171              		@ frame_needed = 0, uses_anonymous_args = 0
 172              		@ link register save eliminated.
  45:code/main.c   ****   
  46:code/main.c   ****   return SENSORS_REGS[2];
 173              		.loc 1 46 0
 174 0038 024B     		ldr	r3, .L14	@ tmp114,
 175 003a 1B68     		ldr	r3, [r3]	@ D.4597, SENSORS_REGS
 176 003c 0833     		adds	r3, r3, #8	@ D.4597,
 177 003e 1B68     		ldr	r3, [r3]	@ D.4598, *_3
  47:code/main.c   **** } 
 178              		.loc 1 47 0
 179 0040 1800     		movs	r0, r3	@, <retval>
 180              		@ sp needed	@
 181 0042 7047     		bx	lr
ARM GAS  /tmp/ccwNEFwB.s 			page 5


 182              	.L15:
 183              		.align	2
 184              	.L14:
 185 0044 00000000 		.word	SENSORS_REGS
 186              		.cfi_endproc
 187              	.LFE3:
 188              		.size	read_fork_cnt, .-read_fork_cnt
 189              		.align	2
 190              		.global	read_pedal_cnt
 191              		.code	16
 192              		.thumb_func
 193              		.type	read_pedal_cnt, %function
 194              	read_pedal_cnt:
 195              	.LFB4:
  48:code/main.c   **** 
  49:code/main.c   **** uint32_t read_pedal_cnt(void) {
 196              		.loc 1 49 0
 197              		.cfi_startproc
 198              		@ args = 0, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              		@ link register save eliminated.
  50:code/main.c   ****   
  51:code/main.c   ****   return SENSORS_REGS[3];
 201              		.loc 1 51 0
 202 0048 024B     		ldr	r3, .L18	@ tmp114,
 203 004a 1B68     		ldr	r3, [r3]	@ D.4599, SENSORS_REGS
 204 004c 0C33     		adds	r3, r3, #12	@ D.4599,
 205 004e 1B68     		ldr	r3, [r3]	@ D.4600, *_3
  52:code/main.c   **** } 
 206              		.loc 1 52 0
 207 0050 1800     		movs	r0, r3	@, <retval>
 208              		@ sp needed	@
 209 0052 7047     		bx	lr
 210              	.L19:
 211              		.align	2
 212              	.L18:
 213 0054 00000000 		.word	SENSORS_REGS
 214              		.cfi_endproc
 215              	.LFE4:
 216              		.size	read_pedal_cnt, .-read_pedal_cnt
 217              		.align	2
 218              		.global	read_nMode
 219              		.code	16
 220              		.thumb_func
 221              		.type	read_nMode, %function
 222              	read_nMode:
 223              	.LFB5:
  53:code/main.c   **** 
  54:code/main.c   **** //uint32_t read_timer(void) {
  55:code/main.c   ****   
  56:code/main.c   **** //  return SENSORS_REGS[4];
  57:code/main.c   **** //}
  58:code/main.c   **** 
  59:code/main.c   **** //void reset_timer(void){
  60:code/main.c   **** //  SENSORS_REGS[4] = 0x00000000;
  61:code/main.c   **** //} 
  62:code/main.c   **** 
ARM GAS  /tmp/ccwNEFwB.s 			page 6


  63:code/main.c   **** //uint32_t read_status(void) {
  64:code/main.c   ****   
  65:code/main.c   **** //  return SENSORS_REGS[5];
  66:code/main.c   **** //}
  67:code/main.c   **** 
  68:code/main.c   **** uint32_t read_nMode(void) {
 224              		.loc 1 68 0
 225              		.cfi_startproc
 226              		@ args = 0, pretend = 0, frame = 0
 227              		@ frame_needed = 0, uses_anonymous_args = 0
 228              		@ link register save eliminated.
  69:code/main.c   ****   
  70:code/main.c   ****   return BUTTONS_REGS[0];
 229              		.loc 1 70 0
 230 0058 024B     		ldr	r3, .L22	@ tmp113,
 231 005a 1B68     		ldr	r3, [r3]	@ D.4601, BUTTONS_REGS
 232 005c 1B68     		ldr	r3, [r3]	@ D.4602, *_2
  71:code/main.c   **** }
 233              		.loc 1 71 0
 234 005e 1800     		movs	r0, r3	@, <retval>
 235              		@ sp needed	@
 236 0060 7047     		bx	lr
 237              	.L23:
 238 0062 C046     		.align	2
 239              	.L22:
 240 0064 00000000 		.word	BUTTONS_REGS
 241              		.cfi_endproc
 242              	.LFE5:
 243              		.size	read_nMode, .-read_nMode
 244              		.align	2
 245              		.global	read_nTrip
 246              		.code	16
 247              		.thumb_func
 248              		.type	read_nTrip, %function
 249              	read_nTrip:
 250              	.LFB6:
  72:code/main.c   **** 
  73:code/main.c   **** uint32_t read_nTrip(void) {
 251              		.loc 1 73 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
  74:code/main.c   ****   
  75:code/main.c   ****   return BUTTONS_REGS[1];
 256              		.loc 1 75 0
 257 0068 024B     		ldr	r3, .L26	@ tmp114,
 258 006a 1B68     		ldr	r3, [r3]	@ D.4603, BUTTONS_REGS
 259 006c 0433     		adds	r3, r3, #4	@ D.4603,
 260 006e 1B68     		ldr	r3, [r3]	@ D.4604, *_3
  76:code/main.c   **** }
 261              		.loc 1 76 0
 262 0070 1800     		movs	r0, r3	@, <retval>
 263              		@ sp needed	@
 264 0072 7047     		bx	lr
 265              	.L27:
 266              		.align	2
ARM GAS  /tmp/ccwNEFwB.s 			page 7


 267              	.L26:
 268 0074 00000000 		.word	BUTTONS_REGS
 269              		.cfi_endproc
 270              	.LFE6:
 271              		.size	read_nTrip, .-read_nTrip
 272              		.align	2
 273              		.global	read_together_button
 274              		.code	16
 275              		.thumb_func
 276              		.type	read_together_button, %function
 277              	read_together_button:
 278              	.LFB7:
  77:code/main.c   **** 
  78:code/main.c   **** uint32_t read_together_button(void) {
 279              		.loc 1 78 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
  79:code/main.c   ****   
  80:code/main.c   ****   return BUTTONS_REGS[2];
 284              		.loc 1 80 0
 285 0078 024B     		ldr	r3, .L30	@ tmp114,
 286 007a 1B68     		ldr	r3, [r3]	@ D.4605, BUTTONS_REGS
 287 007c 0833     		adds	r3, r3, #8	@ D.4605,
 288 007e 1B68     		ldr	r3, [r3]	@ D.4606, *_3
  81:code/main.c   **** }
 289              		.loc 1 81 0
 290 0080 1800     		movs	r0, r3	@, <retval>
 291              		@ sp needed	@
 292 0082 7047     		bx	lr
 293              	.L31:
 294              		.align	2
 295              	.L30:
 296 0084 00000000 		.word	BUTTONS_REGS
 297              		.cfi_endproc
 298              	.LFE7:
 299              		.size	read_together_button, .-read_together_button
 300              		.align	2
 301              		.global	connect_digits
 302              		.code	16
 303              		.thumb_func
 304              		.type	connect_digits, %function
 305              	connect_digits:
 306              	.LFB8:
  82:code/main.c   **** 
  83:code/main.c   **** //////////////////////////////////////////////////////////////////
  84:code/main.c   **** // Other Functions
  85:code/main.c   **** //////////////////////////////////////////////////////////////////
  86:code/main.c   **** 
  87:code/main.c   **** 
  88:code/main.c   **** uint32_t connect_digits(uint8_t DP, uint8_t digit3, uint8_t digit2, uint8_t digit1, uint8_t digit0)
 307              		.loc 1 88 0
 308              		.cfi_startproc
 309              		@ args = 4, pretend = 0, frame = 32
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311 0088 30B5     		push	{r4, r5, lr}	@
ARM GAS  /tmp/ccwNEFwB.s 			page 8


 312              	.LCFI1:
 313              		.cfi_def_cfa_offset 12
 314              		.cfi_offset 4, -12
 315              		.cfi_offset 5, -8
 316              		.cfi_offset 14, -4
 317 008a 89B0     		sub	sp, sp, #36	@,,
 318              	.LCFI2:
 319              		.cfi_def_cfa_offset 48
 320 008c 0500     		movs	r5, r0	@ tmp123, DP
 321 008e 0C00     		movs	r4, r1	@ tmp126, digit3
 322 0090 1000     		movs	r0, r2	@ tmp129, digit2
 323 0092 1900     		movs	r1, r3	@ tmp132, digit1
 324 0094 6B46     		mov	r3, sp	@ tmp149,
 325 0096 0733     		adds	r3, r3, #7	@ tmp124,
 326 0098 2A1C     		adds	r2, r5, #0	@ tmp125, tmp123
 327 009a 1A70     		strb	r2, [r3]	@ tmp125, DP
 328 009c 6B46     		mov	r3, sp	@ tmp150,
 329 009e 0633     		adds	r3, r3, #6	@ tmp127,
 330 00a0 221C     		adds	r2, r4, #0	@ tmp128, tmp126
 331 00a2 1A70     		strb	r2, [r3]	@ tmp128, digit3
 332 00a4 6B46     		mov	r3, sp	@ tmp151,
 333 00a6 0533     		adds	r3, r3, #5	@ tmp130,
 334 00a8 021C     		adds	r2, r0, #0	@ tmp131, tmp129
 335 00aa 1A70     		strb	r2, [r3]	@ tmp131, digit2
 336 00ac 01AB     		add	r3, sp, #4	@ tmp133,,
 337 00ae 0A1C     		adds	r2, r1, #0	@ tmp134, tmp132
 338 00b0 1A70     		strb	r2, [r3]	@ tmp134, digit1
  89:code/main.c   ****   uint32_t led_display = 0x00000000;
 339              		.loc 1 89 0
 340 00b2 0023     		movs	r3, #0	@ tmp135,
 341 00b4 0793     		str	r3, [sp, #28]	@ tmp135, led_display
  90:code/main.c   **** 
  91:code/main.c   ****   uint32_t dp = DP << 15;
 342              		.loc 1 91 0
 343 00b6 6B46     		mov	r3, sp	@ tmp152,
 344 00b8 0733     		adds	r3, r3, #7	@ tmp136,
 345 00ba 1B78     		ldrb	r3, [r3]	@ D.4607, DP
 346 00bc DB03     		lsls	r3, r3, #15	@ D.4607, D.4607,
 347 00be 0693     		str	r3, [sp, #24]	@ D.4607, dp
  92:code/main.c   ****   uint32_t d3 = digit3 << 12;
 348              		.loc 1 92 0
 349 00c0 6B46     		mov	r3, sp	@ tmp153,
 350 00c2 0633     		adds	r3, r3, #6	@ tmp137,
 351 00c4 1B78     		ldrb	r3, [r3]	@ D.4607, digit3
 352 00c6 1B03     		lsls	r3, r3, #12	@ D.4607, D.4607,
 353 00c8 0593     		str	r3, [sp, #20]	@ D.4607, d3
  93:code/main.c   ****   uint32_t d2 = digit2 << 8;
 354              		.loc 1 93 0
 355 00ca 6B46     		mov	r3, sp	@ tmp154,
 356 00cc 0533     		adds	r3, r3, #5	@ tmp138,
 357 00ce 1B78     		ldrb	r3, [r3]	@ D.4607, digit2
 358 00d0 1B02     		lsls	r3, r3, #8	@ D.4607, D.4607,
 359 00d2 0493     		str	r3, [sp, #16]	@ D.4607, d2
  94:code/main.c   ****   uint32_t d1 = digit1 << 4;
 360              		.loc 1 94 0
 361 00d4 01AB     		add	r3, sp, #4	@ tmp139,,
 362 00d6 1B78     		ldrb	r3, [r3]	@ D.4607, digit1
ARM GAS  /tmp/ccwNEFwB.s 			page 9


 363 00d8 1B01     		lsls	r3, r3, #4	@ D.4607, D.4607,
 364 00da 0393     		str	r3, [sp, #12]	@ D.4607, d1
  95:code/main.c   ****   uint32_t d0 = digit0;
 365              		.loc 1 95 0
 366 00dc 0CAB     		add	r3, sp, #48	@ tmp140,,
 367 00de 1B78     		ldrb	r3, [r3]	@ tmp141, digit0
 368 00e0 0293     		str	r3, [sp, #8]	@ tmp141, d0
  96:code/main.c   ****   
  97:code/main.c   ****   led_display = dp + d3 + d2 + d1 + d0;
 369              		.loc 1 97 0
 370 00e2 069A     		ldr	r2, [sp, #24]	@ tmp142, dp
 371 00e4 059B     		ldr	r3, [sp, #20]	@ tmp143, d3
 372 00e6 D218     		adds	r2, r2, r3	@ D.4608, tmp142, tmp143
 373 00e8 049B     		ldr	r3, [sp, #16]	@ tmp144, d2
 374 00ea D218     		adds	r2, r2, r3	@ D.4608, D.4608, tmp144
 375 00ec 039B     		ldr	r3, [sp, #12]	@ tmp145, d1
 376 00ee D218     		adds	r2, r2, r3	@ D.4608, D.4608, tmp145
 377 00f0 029B     		ldr	r3, [sp, #8]	@ tmp147, d0
 378 00f2 D318     		adds	r3, r2, r3	@ tmp146, D.4608, tmp147
 379 00f4 0793     		str	r3, [sp, #28]	@ tmp146, led_display
  98:code/main.c   ****   
  99:code/main.c   ****   return led_display;
 380              		.loc 1 99 0
 381 00f6 079B     		ldr	r3, [sp, #28]	@ D.4609, led_display
 100:code/main.c   **** }
 382              		.loc 1 100 0
 383 00f8 1800     		movs	r0, r3	@, <retval>
 384 00fa 09B0     		add	sp, sp, #36	@,,
 385              		@ sp needed	@
 386 00fc 30BD     		pop	{r4, r5, pc}
 387              		.cfi_endproc
 388              	.LFE8:
 389              		.size	connect_digits, .-connect_digits
 390              		.global	__aeabi_uidivmod
 391              		.global	__aeabi_uidiv
 392 00fe C046     		.align	2
 393              		.global	main
 394              		.code	16
 395              		.thumb_func
 396              		.type	main, %function
 397              	main:
 398              	.LFB9:
 101:code/main.c   **** 
 102:code/main.c   **** //uint32_t low_pass_filter(uint32_t last_speed, uint32_t present_speed, uint8_t factor) {
 103:code/main.c   ****   
 104:code/main.c   ****   //return last_speed * (1 - factor) + present_speed * factor;
 105:code/main.c   ****   
 106:code/main.c   **** //}
 107:code/main.c   **** 
 108:code/main.c   **** //////////////////////////////////////////////////////////////////
 109:code/main.c   **** // Main Function
 110:code/main.c   **** //////////////////////////////////////////////////////////////////
 111:code/main.c   **** 
 112:code/main.c   **** int main(void) {
 399              		.loc 1 112 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 72
ARM GAS  /tmp/ccwNEFwB.s 			page 10


 402              		@ frame_needed = 0, uses_anonymous_args = 0
 403 0100 30B5     		push	{r4, r5, lr}	@
 404              	.LCFI3:
 405              		.cfi_def_cfa_offset 12
 406              		.cfi_offset 4, -12
 407              		.cfi_offset 5, -8
 408              		.cfi_offset 14, -4
 409 0102 95B0     		sub	sp, sp, #84	@,,
 410              	.LCFI4:
 411              		.cfi_def_cfa_offset 96
 113:code/main.c   **** 
 114:code/main.c   ****   uint8_t Mode = 0x00;
 412              		.loc 1 114 0
 413 0104 4F23     		movs	r3, #79	@ tmp298,
 414 0106 6B44     		add	r3, r3, sp	@ tmp298,
 415 0108 0022     		movs	r2, #0	@ tmp299,
 416 010a 1A70     		strb	r2, [r3]	@ tmp300, Mode
 115:code/main.c   **** //  Odometer 
 116:code/main.c   ****   uint32_t fork_counter = 0x00000000;
 417              		.loc 1 116 0
 418 010c 0023     		movs	r3, #0	@ tmp301,
 419 010e 1293     		str	r3, [sp, #72]	@ tmp301, fork_counter
 117:code/main.c   ****   uint32_t odometer = 0x00000000;
 420              		.loc 1 117 0
 421 0110 0023     		movs	r3, #0	@ tmp302,
 422 0112 1193     		str	r3, [sp, #68]	@ tmp302, odometer
 118:code/main.c   **** 
 119:code/main.c   **** //  Trip Timer
 120:code/main.c   ****   uint32_t time = 0x00000000;
 423              		.loc 1 120 0
 424 0114 0023     		movs	r3, #0	@ tmp303,
 425 0116 1093     		str	r3, [sp, #64]	@ tmp303, time
 121:code/main.c   ****   uint32_t accumulate_time = 0x00000000;
 426              		.loc 1 121 0
 427 0118 0023     		movs	r3, #0	@ tmp304,
 428 011a 0F93     		str	r3, [sp, #60]	@ tmp304, accumulate_time
 122:code/main.c   ****   uint32_t minute = 0x00000000;
 429              		.loc 1 122 0
 430 011c 0023     		movs	r3, #0	@ tmp305,
 431 011e 0493     		str	r3, [sp, #16]	@ tmp305, minute
 123:code/main.c   **** 
 124:code/main.c   **** //  Average Speed
 125:code/main.c   ****   uint32_t av_ssni_419 = 0x00000000;
 432              		.loc 1 125 0
 433 0120 0023     		movs	r3, #0	@ tmp306,
 434 0122 0E93     		str	r3, [sp, #56]	@ tmp306, av_ssni_419
 126:code/main.c   **** 
 127:code/main.c   **** //  Maximum Speed
 128:code/main.c   ****   uint32_t max_speed = 0x00000000;
 435              		.loc 1 128 0
 436 0124 0023     		movs	r3, #0	@ tmp307,
 437 0126 0D93     		str	r3, [sp, #52]	@ tmp307, max_speed
 129:code/main.c   **** 
 130:code/main.c   **** //  Speedometer
 131:code/main.c   ****   uint32_t speedometer = 0x00000000;
 438              		.loc 1 131 0
 439 0128 0023     		movs	r3, #0	@ tmp308,
ARM GAS  /tmp/ccwNEFwB.s 			page 11


 440 012a 0C93     		str	r3, [sp, #48]	@ tmp308, speedometer
 132:code/main.c   **** //  uint32_t last_speed = 0x00000000;
 133:code/main.c   **** //  uint32_t present_speed = 0x00000000;
 134:code/main.c   ****   uint32_t fork_time = 0x00000000;
 441              		.loc 1 134 0
 442 012c 0023     		movs	r3, #0	@ tmp309,
 443 012e 0B93     		str	r3, [sp, #44]	@ tmp309, fork_time
 135:code/main.c   ****   //uint8_t  lpf_factor=0.5;
 136:code/main.c   **** 
 137:code/main.c   **** //  Cadence
 138:code/main.c   ****   uint32_t cadence_meter = 0x00000000;
 444              		.loc 1 138 0
 445 0130 0023     		movs	r3, #0	@ tmp310,
 446 0132 0A93     		str	r3, [sp, #40]	@ tmp310, cadence_meter
 139:code/main.c   **** 
 140:code/main.c   **** //  Calorie
 141:code/main.c   ****   uint32_t calorie = 0x00000000;
 447              		.loc 1 141 0
 448 0134 0023     		movs	r3, #0	@ tmp311,
 449 0136 0993     		str	r3, [sp, #36]	@ tmp311, calorie
 142:code/main.c   **** 
 143:code/main.c   **** //  LED display
 144:code/main.c   ****   uint8_t digits[4];
 145:code/main.c   ****   digits[0] = 0;
 450              		.loc 1 145 0
 451 0138 03AB     		add	r3, sp, #12	@ tmp312,,
 452 013a 0022     		movs	r2, #0	@ tmp313,
 453 013c 1A70     		strb	r2, [r3]	@ tmp314, digits
 146:code/main.c   ****   digits[1] = 0;
 454              		.loc 1 146 0
 455 013e 03AB     		add	r3, sp, #12	@ tmp315,,
 456 0140 0022     		movs	r2, #0	@ tmp316,
 457 0142 5A70     		strb	r2, [r3, #1]	@ tmp317, digits
 147:code/main.c   ****   digits[2] = 0;
 458              		.loc 1 147 0
 459 0144 03AB     		add	r3, sp, #12	@ tmp318,,
 460 0146 0022     		movs	r2, #0	@ tmp319,
 461 0148 9A70     		strb	r2, [r3, #2]	@ tmp320, digits
 148:code/main.c   ****   digits[3] = 0;
 462              		.loc 1 148 0
 463 014a 03AB     		add	r3, sp, #12	@ tmp321,,
 464 014c 0022     		movs	r2, #0	@ tmp322,
 465 014e DA70     		strb	r2, [r3, #3]	@ tmp323, digits
 149:code/main.c   ****   uint8_t DP = 0x07;
 466              		.loc 1 149 0
 467 0150 2323     		movs	r3, #35	@ tmp324,
 468 0152 6B44     		add	r3, r3, sp	@ tmp324,
 469 0154 0722     		movs	r2, #7	@ tmp325,
 470 0156 1A70     		strb	r2, [r3]	@ tmp326, DP
 150:code/main.c   ****   uint8_t digit_index = 0x02;
 471              		.loc 1 150 0
 472 0158 2223     		movs	r3, #34	@ tmp327,
 473 015a 6B44     		add	r3, r3, sp	@ tmp327,
 474 015c 0222     		movs	r2, #2	@ tmp328,
 475 015e 1A70     		strb	r2, [r3]	@ tmp329, digit_index
 151:code/main.c   ****   uint16_t DiscreteDisplay = 0x0000;
 476              		.loc 1 151 0
ARM GAS  /tmp/ccwNEFwB.s 			page 12


 477 0160 08AB     		add	r3, sp, #32	@ tmp330,,
 478 0162 0022     		movs	r2, #0	@ tmp331,
 479 0164 1A80     		strh	r2, [r3]	@ tmp332, DiscreteDisplay
 152:code/main.c   ****   bool display = false;
 480              		.loc 1 152 0
 481 0166 1F23     		movs	r3, #31	@ tmp333,
 482 0168 6B44     		add	r3, r3, sp	@ tmp333,
 483 016a 0022     		movs	r2, #0	@ tmp334,
 484 016c 1A70     		strb	r2, [r3]	@ tmp335, display
 153:code/main.c   **** 
 154:code/main.c   **** //  Constant
 155:code/main.c   ****   //uint32_t kinematic = 0.6142;
 156:code/main.c   **** 
 157:code/main.c   **** //  Use-defined Parameters
 158:code/main.c   ****   uint32_t weight = 0x00000046;// default weight is 70kg 
 485              		.loc 1 158 0
 486 016e 4623     		movs	r3, #70	@ tmp336,
 487 0170 0693     		str	r3, [sp, #24]	@ tmp336, weight
 159:code/main.c   ****   uint32_t wheel_size = 0x000000D6; // default wheel size is 214cm
 488              		.loc 1 159 0
 489 0172 D623     		movs	r3, #214	@ tmp337,
 490 0174 0593     		str	r3, [sp, #20]	@ tmp337, wheel_size
 160:code/main.c   **** 
 161:code/main.c   **** //  Initialize
 162:code/main.c   ****   write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 491              		.loc 1 162 0
 492 0176 03AB     		add	r3, sp, #12	@ tmp338,,
 493 0178 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 494 017a 03AB     		add	r3, sp, #12	@ tmp339,,
 495 017c 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 496 017e 03AB     		add	r3, sp, #12	@ tmp340,,
 497 0180 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 498 0182 03AB     		add	r3, sp, #12	@ tmp341,,
 499 0184 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 500 0186 2322     		movs	r2, #35	@ tmp342,
 501 0188 6A44     		add	r2, r2, sp	@ tmp342,
 502 018a 1078     		ldrb	r0, [r2]	@ tmp343, DP
 503 018c 0093     		str	r3, [sp]	@ D.4610,
 504 018e 2B00     		movs	r3, r5	@, D.4610
 505 0190 2200     		movs	r2, r4	@, D.4610
 506 0192 FFF7FEFF 		bl	connect_digits	@
 507 0196 0300     		movs	r3, r0	@ D.4611,
 508 0198 1800     		movs	r0, r3	@, D.4611
 509 019a FFF7FEFF 		bl	write_led	@
 510              	.L77:
 163:code/main.c   **** // reset_timer();
 164:code/main.c   **** 
 165:code/main.c   **** //  Main program -- permernant loop  
 166:code/main.c   ****   while(1){
 167:code/main.c   **** 
 168:code/main.c   ****     if (read_together_button()){
 511              		.loc 1 168 0
 512 019e FFF7FEFF 		bl	read_together_button	@
 513 01a2 031E     		subs	r3, r0, #0	@ D.4611,,
 514 01a4 26D0     		beq	.L35	@,
 169:code/main.c   ****       digit_index = 0x02;
 515              		.loc 1 169 0
ARM GAS  /tmp/ccwNEFwB.s 			page 13


 516 01a6 2223     		movs	r3, #34	@ tmp344,
 517 01a8 6B44     		add	r3, r3, sp	@ tmp344,
 518 01aa 0222     		movs	r2, #2	@ tmp345,
 519 01ac 1A70     		strb	r2, [r3]	@ tmp346, digit_index
 170:code/main.c   ****       digits[3] = 0x07;
 520              		.loc 1 170 0
 521 01ae 03AB     		add	r3, sp, #12	@ tmp347,,
 522 01b0 0722     		movs	r2, #7	@ tmp348,
 523 01b2 DA70     		strb	r2, [r3, #3]	@ tmp349, digits
 171:code/main.c   ****       if (Mode != 0x06) {
 524              		.loc 1 171 0
 525 01b4 4F23     		movs	r3, #79	@ tmp350,
 526 01b6 6B44     		add	r3, r3, sp	@ tmp350,
 527 01b8 1B78     		ldrb	r3, [r3]	@ tmp351, Mode
 528 01ba 062B     		cmp	r3, #6	@ tmp351,
 529 01bc 0DD0     		beq	.L36	@,
 172:code/main.c   ****         digits[2] = 0x02;
 530              		.loc 1 172 0
 531 01be 03AB     		add	r3, sp, #12	@ tmp352,,
 532 01c0 0222     		movs	r2, #2	@ tmp353,
 533 01c2 9A70     		strb	r2, [r3, #2]	@ tmp354, digits
 173:code/main.c   ****         digits[1] = 0x01;
 534              		.loc 1 173 0
 535 01c4 03AB     		add	r3, sp, #12	@ tmp355,,
 536 01c6 0122     		movs	r2, #1	@ tmp356,
 537 01c8 5A70     		strb	r2, [r3, #1]	@ tmp357, digits
 174:code/main.c   ****         digits[0] = 0x04;
 538              		.loc 1 174 0
 539 01ca 03AB     		add	r3, sp, #12	@ tmp358,,
 540 01cc 0422     		movs	r2, #4	@ tmp359,
 541 01ce 1A70     		strb	r2, [r3]	@ tmp360, digits
 175:code/main.c   ****         Mode = 0x07;  // go to set wheel size
 542              		.loc 1 175 0
 543 01d0 4F23     		movs	r3, #79	@ tmp361,
 544 01d2 6B44     		add	r3, r3, sp	@ tmp361,
 545 01d4 0722     		movs	r2, #7	@ tmp362,
 546 01d6 1A70     		strb	r2, [r3]	@ tmp363, Mode
 547 01d8 0CE0     		b	.L35	@
 548              	.L36:
 176:code/main.c   ****       }
 177:code/main.c   ****       else {
 178:code/main.c   ****         digits[2] = 0x00;
 549              		.loc 1 178 0
 550 01da 03AB     		add	r3, sp, #12	@ tmp364,,
 551 01dc 0022     		movs	r2, #0	@ tmp365,
 552 01de 9A70     		strb	r2, [r3, #2]	@ tmp366, digits
 179:code/main.c   ****         digits[1] = 0x04;
 553              		.loc 1 179 0
 554 01e0 03AB     		add	r3, sp, #12	@ tmp367,,
 555 01e2 0422     		movs	r2, #4	@ tmp368,
 556 01e4 5A70     		strb	r2, [r3, #1]	@ tmp369, digits
 180:code/main.c   ****         digits[0] = 0x00;
 557              		.loc 1 180 0
 558 01e6 03AB     		add	r3, sp, #12	@ tmp370,,
 559 01e8 0022     		movs	r2, #0	@ tmp371,
 560 01ea 1A70     		strb	r2, [r3]	@ tmp372, digits
 181:code/main.c   ****         Mode = 0x08;  // go to set weight
ARM GAS  /tmp/ccwNEFwB.s 			page 14


 561              		.loc 1 181 0
 562 01ec 4F23     		movs	r3, #79	@ tmp373,
 563 01ee 6B44     		add	r3, r3, sp	@ tmp373,
 564 01f0 0822     		movs	r2, #8	@ tmp374,
 565 01f2 1A70     		strb	r2, [r3]	@ tmp375, Mode
 566              	.L35:
 182:code/main.c   ****       }
 183:code/main.c   ****     }
 184:code/main.c   **** 
 185:code/main.c   **** //    if(read_nMode() == 0){ 
 186:code/main.c   **** //      if ( Mode > 0x06 ){
 187:code/main.c   **** //        Mode = 0x00;  // back to odometer
 188:code/main.c   **** //      }
 189:code/main.c   **** //     else {
 190:code/main.c   **** //       Mode = Mode + 1; // go to next Mode
 191:code/main.c   **** //      }
 192:code/main.c   **** //    }
 193:code/main.c   **** 
 194:code/main.c   ****     switch (Mode) {
 567              		.loc 1 194 0
 568 01f4 4F23     		movs	r3, #79	@ tmp376,
 569 01f6 6B44     		add	r3, r3, sp	@ tmp376,
 570 01f8 1B78     		ldrb	r3, [r3]	@ D.4612, Mode
 571 01fa 082B     		cmp	r3, #8	@ D.4612,
 572 01fc 00D9     		bls	.LCB400	@
 573 01fe 1FE3     		b	.L37	@long jump	@
 574              	.LCB400:
 575 0200 9A00     		lsls	r2, r3, #2	@ tmp377, D.4612,
 576 0202 DD4B     		ldr	r3, .L78	@ tmp379,
 577 0204 D318     		adds	r3, r2, r3	@ tmp378, tmp377, tmp379
 578 0206 1B68     		ldr	r3, [r3]	@ tmp380,
 579 0208 9F46     		mov	pc, r3	@ tmp380
 580              		.section	.rodata
 581              		.align	2
 582              	.L39:
 583 0000 0A020000 		.word	.L38
 584 0004 B4020000 		.word	.L40
 585 0008 72030000 		.word	.L41
 586 000c 1A040000 		.word	.L42
 587 0010 C0040000 		.word	.L43
 588 0014 7C050000 		.word	.L44
 589 0018 26060000 		.word	.L45
 590 001c D0060000 		.word	.L46
 591 0020 88070000 		.word	.L47
 592              		.text
 593              	.L38:
 195:code/main.c   ****       case 0x00: // odometer        range: 00.0 ~ 99.9 km
 196:code/main.c   ****               if (!read_nTrip()){
 594              		.loc 1 196 0
 595 020a FFF7FEFF 		bl	read_nTrip	@
 596 020e 031E     		subs	r3, r0, #0	@ D.4611,,
 597 0210 01D1     		bne	.L48	@,
 197:code/main.c   ****                 fork_counter = 0x00000000;
 598              		.loc 1 197 0
 599 0212 0023     		movs	r3, #0	@ tmp381,
 600 0214 1293     		str	r3, [sp, #72]	@ tmp381, fork_counter
 601              	.L48:
ARM GAS  /tmp/ccwNEFwB.s 			page 15


 198:code/main.c   ****               }
 199:code/main.c   ****               if (!read_nMode()){
 602              		.loc 1 199 0
 603 0216 FFF7FEFF 		bl	read_nMode	@
 604 021a 031E     		subs	r3, r0, #0	@ D.4611,,
 605 021c 03D1     		bne	.L49	@,
 200:code/main.c   ****                 Mode = 0x01;
 606              		.loc 1 200 0
 607 021e 4F23     		movs	r3, #79	@ tmp382,
 608 0220 6B44     		add	r3, r3, sp	@ tmp382,
 609 0222 0122     		movs	r2, #1	@ tmp383,
 610 0224 1A70     		strb	r2, [r3]	@ tmp384, Mode
 611              	.L49:
 201:code/main.c   ****               } 
 202:code/main.c   **** 
 203:code/main.c   ****               DP = 0x02;
 612              		.loc 1 203 0
 613 0226 2323     		movs	r3, #35	@ tmp385,
 614 0228 6B44     		add	r3, r3, sp	@ tmp385,
 615 022a 0222     		movs	r2, #2	@ tmp386,
 616 022c 1A70     		strb	r2, [r3]	@ tmp387, DP
 204:code/main.c   ****               digits[3] = 0x00;
 617              		.loc 1 204 0
 618 022e 03AB     		add	r3, sp, #12	@ tmp388,,
 619 0230 0022     		movs	r2, #0	@ tmp389,
 620 0232 DA70     		strb	r2, [r3, #3]	@ tmp390, digits
 205:code/main.c   ****               digits[2] = (odometer%1000)/100;
 621              		.loc 1 205 0
 622 0234 119A     		ldr	r2, [sp, #68]	@ tmp391, odometer
 623 0236 FA23     		movs	r3, #250	@ tmp925,
 624 0238 9900     		lsls	r1, r3, #2	@, tmp925,
 625 023a 1000     		movs	r0, r2	@, tmp391
 626 023c FFF7FEFF 		bl	__aeabi_uidivmod	@
 627 0240 0B00     		movs	r3, r1	@ tmp396,
 628 0242 6421     		movs	r1, #100	@,
 629 0244 1800     		movs	r0, r3	@, D.4611
 630 0246 FFF7FEFF 		bl	__aeabi_uidiv	@
 631 024a 0300     		movs	r3, r0	@ tmp399,
 632 024c DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 633 024e 03AB     		add	r3, sp, #12	@ tmp400,,
 634 0250 9A70     		strb	r2, [r3, #2]	@ tmp401, digits
 206:code/main.c   ****               digits[1] = (odometer%100)/10; 
 635              		.loc 1 206 0
 636 0252 119B     		ldr	r3, [sp, #68]	@ tmp402, odometer
 637 0254 6421     		movs	r1, #100	@,
 638 0256 1800     		movs	r0, r3	@, tmp402
 639 0258 FFF7FEFF 		bl	__aeabi_uidivmod	@
 640 025c 0B00     		movs	r3, r1	@ tmp407,
 641 025e 0A21     		movs	r1, #10	@,
 642 0260 1800     		movs	r0, r3	@, D.4611
 643 0262 FFF7FEFF 		bl	__aeabi_uidiv	@
 644 0266 0300     		movs	r3, r0	@ tmp410,
 645 0268 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 646 026a 03AB     		add	r3, sp, #12	@ tmp411,,
 647 026c 5A70     		strb	r2, [r3, #1]	@ tmp412, digits
 207:code/main.c   ****               digits[0] = (odometer%100)%10;
 648              		.loc 1 207 0
ARM GAS  /tmp/ccwNEFwB.s 			page 16


 649 026e 119B     		ldr	r3, [sp, #68]	@ tmp413, odometer
 650 0270 6421     		movs	r1, #100	@,
 651 0272 1800     		movs	r0, r3	@, tmp413
 652 0274 FFF7FEFF 		bl	__aeabi_uidivmod	@
 653 0278 0B00     		movs	r3, r1	@ tmp418,
 654 027a 0A21     		movs	r1, #10	@,
 655 027c 1800     		movs	r0, r3	@, D.4611
 656 027e FFF7FEFF 		bl	__aeabi_uidivmod	@
 657 0282 0B00     		movs	r3, r1	@ tmp423,
 658 0284 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 659 0286 03AB     		add	r3, sp, #12	@ tmp424,,
 660 0288 1A70     		strb	r2, [r3]	@ tmp425, digits
 208:code/main.c   **** 
 209:code/main.c   ****               write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 661              		.loc 1 209 0
 662 028a 03AB     		add	r3, sp, #12	@ tmp426,,
 663 028c D978     		ldrb	r1, [r3, #3]	@ D.4610,
 664 028e 03AB     		add	r3, sp, #12	@ tmp427,,
 665 0290 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 666 0292 03AB     		add	r3, sp, #12	@ tmp428,,
 667 0294 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 668 0296 03AB     		add	r3, sp, #12	@ tmp429,,
 669 0298 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 670 029a 2322     		movs	r2, #35	@ tmp430,
 671 029c 6A44     		add	r2, r2, sp	@ tmp430,
 672 029e 1078     		ldrb	r0, [r2]	@ tmp431, DP
 673 02a0 0093     		str	r3, [sp]	@ D.4610,
 674 02a2 2B00     		movs	r3, r5	@, D.4610
 675 02a4 2200     		movs	r2, r4	@, D.4610
 676 02a6 FFF7FEFF 		bl	connect_digits	@
 677 02aa 0300     		movs	r3, r0	@ D.4611,
 678 02ac 1800     		movs	r0, r3	@, D.4611
 679 02ae FFF7FEFF 		bl	write_led	@
 210:code/main.c   **** 
 211:code/main.c   ****         break;
 680              		.loc 1 211 0
 681 02b2 EAE2     		b	.L50	@
 682              	.L40:
 212:code/main.c   ****       case 0x01: // trip timer      time rage : 0.00 ~ 9.59 
 213:code/main.c   ****               if(!read_nTrip()){ 
 683              		.loc 1 213 0
 684 02b4 FFF7FEFF 		bl	read_nTrip	@
 685 02b8 031E     		subs	r3, r0, #0	@ D.4611,,
 686 02ba 01D1     		bne	.L51	@,
 214:code/main.c   ****                 accumulate_time = 0x00000000;
 687              		.loc 1 214 0
 688 02bc 0023     		movs	r3, #0	@ tmp432,
 689 02be 0F93     		str	r3, [sp, #60]	@ tmp432, accumulate_time
 690              	.L51:
 215:code/main.c   ****               }
 216:code/main.c   ****               if(!read_nMode()){
 691              		.loc 1 216 0
 692 02c0 FFF7FEFF 		bl	read_nMode	@
 693 02c4 031E     		subs	r3, r0, #0	@ D.4611,,
 694 02c6 07D1     		bne	.L52	@,
 217:code/main.c   ****                 Mode = 0x02;
 695              		.loc 1 217 0
ARM GAS  /tmp/ccwNEFwB.s 			page 17


 696 02c8 4F23     		movs	r3, #79	@ tmp433,
 697 02ca 6B44     		add	r3, r3, sp	@ tmp433,
 698 02cc 0222     		movs	r2, #2	@ tmp434,
 699 02ce 1A70     		strb	r2, [r3]	@ tmp435, Mode
 218:code/main.c   ****                 display = true;
 700              		.loc 1 218 0
 701 02d0 1F23     		movs	r3, #31	@ tmp436,
 702 02d2 6B44     		add	r3, r3, sp	@ tmp436,
 703 02d4 0122     		movs	r2, #1	@ tmp437,
 704 02d6 1A70     		strb	r2, [r3]	@ tmp438, display
 705              	.L52:
 219:code/main.c   ****               }
 220:code/main.c   **** 
 221:code/main.c   ****               DP = 0x04;
 706              		.loc 1 221 0
 707 02d8 2323     		movs	r3, #35	@ tmp439,
 708 02da 6B44     		add	r3, r3, sp	@ tmp439,
 709 02dc 0422     		movs	r2, #4	@ tmp440,
 710 02de 1A70     		strb	r2, [r3]	@ tmp441, DP
 222:code/main.c   ****               minute = time/60;
 711              		.loc 1 222 0
 712 02e0 109B     		ldr	r3, [sp, #64]	@ tmp443, time
 713 02e2 3C21     		movs	r1, #60	@,
 714 02e4 1800     		movs	r0, r3	@, tmp443
 715 02e6 FFF7FEFF 		bl	__aeabi_uidiv	@
 716 02ea 0300     		movs	r3, r0	@ tmp446,
 717 02ec 0493     		str	r3, [sp, #16]	@ tmp446, minute
 223:code/main.c   **** 	      digits[3] = 0x01;
 718              		.loc 1 223 0
 719 02ee 03AB     		add	r3, sp, #12	@ tmp447,,
 720 02f0 0122     		movs	r2, #1	@ tmp448,
 721 02f2 DA70     		strb	r2, [r3, #3]	@ tmp449, digits
 224:code/main.c   ****               digits[2] = (minute/60)%10;
 722              		.loc 1 224 0
 723 02f4 049B     		ldr	r3, [sp, #16]	@ tmp450, minute
 724 02f6 3C21     		movs	r1, #60	@,
 725 02f8 1800     		movs	r0, r3	@, tmp450
 726 02fa FFF7FEFF 		bl	__aeabi_uidiv	@
 727 02fe 0300     		movs	r3, r0	@ tmp453,
 728 0300 0A21     		movs	r1, #10	@,
 729 0302 1800     		movs	r0, r3	@, D.4611
 730 0304 FFF7FEFF 		bl	__aeabi_uidivmod	@
 731 0308 0B00     		movs	r3, r1	@ tmp458,
 732 030a DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 733 030c 03AB     		add	r3, sp, #12	@ tmp459,,
 734 030e 9A70     		strb	r2, [r3, #2]	@ tmp460, digits
 225:code/main.c   ****               digits[1] = (minute%60)/10;
 735              		.loc 1 225 0
 736 0310 049B     		ldr	r3, [sp, #16]	@ tmp461, minute
 737 0312 3C21     		movs	r1, #60	@,
 738 0314 1800     		movs	r0, r3	@, tmp461
 739 0316 FFF7FEFF 		bl	__aeabi_uidivmod	@
 740 031a 0B00     		movs	r3, r1	@ tmp466,
 741 031c 0A21     		movs	r1, #10	@,
 742 031e 1800     		movs	r0, r3	@, D.4611
 743 0320 FFF7FEFF 		bl	__aeabi_uidiv	@
 744 0324 0300     		movs	r3, r0	@ tmp469,
ARM GAS  /tmp/ccwNEFwB.s 			page 18


 745 0326 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 746 0328 03AB     		add	r3, sp, #12	@ tmp470,,
 747 032a 5A70     		strb	r2, [r3, #1]	@ tmp471, digits
 226:code/main.c   **** 	      digits[0] = (minute%60)%10;
 748              		.loc 1 226 0
 749 032c 049B     		ldr	r3, [sp, #16]	@ tmp472, minute
 750 032e 3C21     		movs	r1, #60	@,
 751 0330 1800     		movs	r0, r3	@, tmp472
 752 0332 FFF7FEFF 		bl	__aeabi_uidivmod	@
 753 0336 0B00     		movs	r3, r1	@ tmp477,
 754 0338 0A21     		movs	r1, #10	@,
 755 033a 1800     		movs	r0, r3	@, D.4611
 756 033c FFF7FEFF 		bl	__aeabi_uidivmod	@
 757 0340 0B00     		movs	r3, r1	@ tmp482,
 758 0342 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 759 0344 03AB     		add	r3, sp, #12	@ tmp483,,
 760 0346 1A70     		strb	r2, [r3]	@ tmp484, digits
 227:code/main.c   **** 
 228:code/main.c   **** 	      write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 761              		.loc 1 228 0
 762 0348 03AB     		add	r3, sp, #12	@ tmp485,,
 763 034a D978     		ldrb	r1, [r3, #3]	@ D.4610,
 764 034c 03AB     		add	r3, sp, #12	@ tmp486,,
 765 034e 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 766 0350 03AB     		add	r3, sp, #12	@ tmp487,,
 767 0352 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 768 0354 03AB     		add	r3, sp, #12	@ tmp488,,
 769 0356 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 770 0358 2322     		movs	r2, #35	@ tmp489,
 771 035a 6A44     		add	r2, r2, sp	@ tmp489,
 772 035c 1078     		ldrb	r0, [r2]	@ tmp490, DP
 773 035e 0093     		str	r3, [sp]	@ D.4610,
 774 0360 2B00     		movs	r3, r5	@, D.4610
 775 0362 2200     		movs	r2, r4	@, D.4610
 776 0364 FFF7FEFF 		bl	connect_digits	@
 777 0368 0300     		movs	r3, r0	@ D.4611,
 778 036a 1800     		movs	r0, r3	@, D.4611
 779 036c FFF7FEFF 		bl	write_led	@
 229:code/main.c   **** 
 230:code/main.c   ****         break;
 780              		.loc 1 230 0
 781 0370 8BE2     		b	.L50	@
 782              	.L41:
 231:code/main.c   ****       case 0x02: // speedometer      range:  00.0 ~ 99.9 km/h
 232:code/main.c   ****               if(!read_nMode()){
 783              		.loc 1 232 0
 784 0372 FFF7FEFF 		bl	read_nMode	@
 785 0376 031E     		subs	r3, r0, #0	@ D.4611,,
 786 0378 03D1     		bne	.L53	@,
 233:code/main.c   ****                 Mode = 0x03;
 787              		.loc 1 233 0
 788 037a 4F23     		movs	r3, #79	@ tmp491,
 789 037c 6B44     		add	r3, r3, sp	@ tmp491,
 790 037e 0322     		movs	r2, #3	@ tmp492,
 791 0380 1A70     		strb	r2, [r3]	@ tmp493, Mode
 792              	.L53:
 234:code/main.c   ****               }
ARM GAS  /tmp/ccwNEFwB.s 			page 19


 235:code/main.c   ****               
 236:code/main.c   ****               if (display) {
 793              		.loc 1 236 0
 794 0382 1F23     		movs	r3, #31	@ tmp494,
 795 0384 6B44     		add	r3, r3, sp	@ tmp494,
 796 0386 1B78     		ldrb	r3, [r3]	@ tmp495, display
 797 0388 002B     		cmp	r3, #0	@ tmp495,
 798 038a 31D0     		beq	.L54	@,
 237:code/main.c   ****               DP = 0x02;
 799              		.loc 1 237 0
 800 038c 2323     		movs	r3, #35	@ tmp496,
 801 038e 6B44     		add	r3, r3, sp	@ tmp496,
 802 0390 0222     		movs	r2, #2	@ tmp497,
 803 0392 1A70     		strb	r2, [r3]	@ tmp498, DP
 238:code/main.c   ****               digits[3] = 0x02;
 804              		.loc 1 238 0
 805 0394 03AB     		add	r3, sp, #12	@ tmp499,,
 806 0396 0222     		movs	r2, #2	@ tmp500,
 807 0398 DA70     		strb	r2, [r3, #3]	@ tmp501, digits
 239:code/main.c   ****               digits[2] = (speedometer%1000)/100;
 808              		.loc 1 239 0
 809 039a 0C9A     		ldr	r2, [sp, #48]	@ tmp502, speedometer
 810 039c FA23     		movs	r3, #250	@ tmp924,
 811 039e 9900     		lsls	r1, r3, #2	@, tmp924,
 812 03a0 1000     		movs	r0, r2	@, tmp502
 813 03a2 FFF7FEFF 		bl	__aeabi_uidivmod	@
 814 03a6 0B00     		movs	r3, r1	@ tmp507,
 815 03a8 6421     		movs	r1, #100	@,
 816 03aa 1800     		movs	r0, r3	@, D.4611
 817 03ac FFF7FEFF 		bl	__aeabi_uidiv	@
 818 03b0 0300     		movs	r3, r0	@ tmp510,
 819 03b2 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 820 03b4 03AB     		add	r3, sp, #12	@ tmp511,,
 821 03b6 9A70     		strb	r2, [r3, #2]	@ tmp512, digits
 240:code/main.c   ****               digits[1] = (speedometer%100)/10; 
 822              		.loc 1 240 0
 823 03b8 0C9B     		ldr	r3, [sp, #48]	@ tmp513, speedometer
 824 03ba 6421     		movs	r1, #100	@,
 825 03bc 1800     		movs	r0, r3	@, tmp513
 826 03be FFF7FEFF 		bl	__aeabi_uidivmod	@
 827 03c2 0B00     		movs	r3, r1	@ tmp518,
 828 03c4 0A21     		movs	r1, #10	@,
 829 03c6 1800     		movs	r0, r3	@, D.4611
 830 03c8 FFF7FEFF 		bl	__aeabi_uidiv	@
 831 03cc 0300     		movs	r3, r0	@ tmp521,
 832 03ce DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 833 03d0 03AB     		add	r3, sp, #12	@ tmp522,,
 834 03d2 5A70     		strb	r2, [r3, #1]	@ tmp523, digits
 241:code/main.c   ****               digits[0] = (speedometer%100)%10;
 835              		.loc 1 241 0
 836 03d4 0C9B     		ldr	r3, [sp, #48]	@ tmp524, speedometer
 837 03d6 6421     		movs	r1, #100	@,
 838 03d8 1800     		movs	r0, r3	@, tmp524
 839 03da FFF7FEFF 		bl	__aeabi_uidivmod	@
 840 03de 0B00     		movs	r3, r1	@ tmp529,
 841 03e0 0A21     		movs	r1, #10	@,
 842 03e2 1800     		movs	r0, r3	@, D.4611
ARM GAS  /tmp/ccwNEFwB.s 			page 20


 843 03e4 FFF7FEFF 		bl	__aeabi_uidivmod	@
 844 03e8 0B00     		movs	r3, r1	@ tmp534,
 845 03ea DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 846 03ec 03AB     		add	r3, sp, #12	@ tmp535,,
 847 03ee 1A70     		strb	r2, [r3]	@ tmp536, digits
 848              	.L54:
 242:code/main.c   ****               }
 243:code/main.c   **** 
 244:code/main.c   ****               write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 849              		.loc 1 244 0
 850 03f0 03AB     		add	r3, sp, #12	@ tmp537,,
 851 03f2 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 852 03f4 03AB     		add	r3, sp, #12	@ tmp538,,
 853 03f6 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 854 03f8 03AB     		add	r3, sp, #12	@ tmp539,,
 855 03fa 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 856 03fc 03AB     		add	r3, sp, #12	@ tmp540,,
 857 03fe 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 858 0400 2322     		movs	r2, #35	@ tmp541,
 859 0402 6A44     		add	r2, r2, sp	@ tmp541,
 860 0404 1078     		ldrb	r0, [r2]	@ tmp542, DP
 861 0406 0093     		str	r3, [sp]	@ D.4610,
 862 0408 2B00     		movs	r3, r5	@, D.4610
 863 040a 2200     		movs	r2, r4	@, D.4610
 864 040c FFF7FEFF 		bl	connect_digits	@
 865 0410 0300     		movs	r3, r0	@ D.4611,
 866 0412 1800     		movs	r0, r3	@, D.4611
 867 0414 FFF7FEFF 		bl	write_led	@
 245:code/main.c   **** 
 246:code/main.c   ****         break;
 868              		.loc 1 246 0
 869 0418 37E2     		b	.L50	@
 870              	.L42:
 247:code/main.c   ****       case 0x03: // cadence meter
 248:code/main.c   ****               if(!read_nMode()){
 871              		.loc 1 248 0
 872 041a FFF7FEFF 		bl	read_nMode	@
 873 041e 031E     		subs	r3, r0, #0	@ D.4611,,
 874 0420 07D1     		bne	.L55	@,
 249:code/main.c   ****                 Mode = 0x04;
 875              		.loc 1 249 0
 876 0422 4F23     		movs	r3, #79	@ tmp543,
 877 0424 6B44     		add	r3, r3, sp	@ tmp543,
 878 0426 0422     		movs	r2, #4	@ tmp544,
 879 0428 1A70     		strb	r2, [r3]	@ tmp545, Mode
 250:code/main.c   ****                 display = true;
 880              		.loc 1 250 0
 881 042a 1F23     		movs	r3, #31	@ tmp546,
 882 042c 6B44     		add	r3, r3, sp	@ tmp546,
 883 042e 0122     		movs	r2, #1	@ tmp547,
 884 0430 1A70     		strb	r2, [r3]	@ tmp548, display
 885              	.L55:
 251:code/main.c   ****               }
 252:code/main.c   **** 
 253:code/main.c   ****               DP = 0x01;
 886              		.loc 1 253 0
 887 0432 2323     		movs	r3, #35	@ tmp549,
ARM GAS  /tmp/ccwNEFwB.s 			page 21


 888 0434 6B44     		add	r3, r3, sp	@ tmp549,
 889 0436 0122     		movs	r2, #1	@ tmp550,
 890 0438 1A70     		strb	r2, [r3]	@ tmp551, DP
 254:code/main.c   ****               digits[3] = 0x03;
 891              		.loc 1 254 0
 892 043a 03AB     		add	r3, sp, #12	@ tmp552,,
 893 043c 0322     		movs	r2, #3	@ tmp553,
 894 043e DA70     		strb	r2, [r3, #3]	@ tmp554, digits
 255:code/main.c   ****               digits[2] = (cadence_meter%1000)/100; 
 895              		.loc 1 255 0
 896 0440 0A9A     		ldr	r2, [sp, #40]	@ tmp555, cadence_meter
 897 0442 FA23     		movs	r3, #250	@ tmp923,
 898 0444 9900     		lsls	r1, r3, #2	@, tmp923,
 899 0446 1000     		movs	r0, r2	@, tmp555
 900 0448 FFF7FEFF 		bl	__aeabi_uidivmod	@
 901 044c 0B00     		movs	r3, r1	@ tmp560,
 902 044e 6421     		movs	r1, #100	@,
 903 0450 1800     		movs	r0, r3	@, D.4611
 904 0452 FFF7FEFF 		bl	__aeabi_uidiv	@
 905 0456 0300     		movs	r3, r0	@ tmp563,
 906 0458 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 907 045a 03AB     		add	r3, sp, #12	@ tmp564,,
 908 045c 9A70     		strb	r2, [r3, #2]	@ tmp565, digits
 256:code/main.c   ****               digits[1] = (cadence_meter%100)/10; 
 909              		.loc 1 256 0
 910 045e 0A9B     		ldr	r3, [sp, #40]	@ tmp566, cadence_meter
 911 0460 6421     		movs	r1, #100	@,
 912 0462 1800     		movs	r0, r3	@, tmp566
 913 0464 FFF7FEFF 		bl	__aeabi_uidivmod	@
 914 0468 0B00     		movs	r3, r1	@ tmp571,
 915 046a 0A21     		movs	r1, #10	@,
 916 046c 1800     		movs	r0, r3	@, D.4611
 917 046e FFF7FEFF 		bl	__aeabi_uidiv	@
 918 0472 0300     		movs	r3, r0	@ tmp574,
 919 0474 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 920 0476 03AB     		add	r3, sp, #12	@ tmp575,,
 921 0478 5A70     		strb	r2, [r3, #1]	@ tmp576, digits
 257:code/main.c   ****               digits[0] = (cadence_meter%100)%10; 
 922              		.loc 1 257 0
 923 047a 0A9B     		ldr	r3, [sp, #40]	@ tmp577, cadence_meter
 924 047c 6421     		movs	r1, #100	@,
 925 047e 1800     		movs	r0, r3	@, tmp577
 926 0480 FFF7FEFF 		bl	__aeabi_uidivmod	@
 927 0484 0B00     		movs	r3, r1	@ tmp582,
 928 0486 0A21     		movs	r1, #10	@,
 929 0488 1800     		movs	r0, r3	@, D.4611
 930 048a FFF7FEFF 		bl	__aeabi_uidivmod	@
 931 048e 0B00     		movs	r3, r1	@ tmp587,
 932 0490 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 933 0492 03AB     		add	r3, sp, #12	@ tmp588,,
 934 0494 1A70     		strb	r2, [r3]	@ tmp589, digits
 258:code/main.c   **** 
 259:code/main.c   **** 	      write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 935              		.loc 1 259 0
 936 0496 03AB     		add	r3, sp, #12	@ tmp590,,
 937 0498 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 938 049a 03AB     		add	r3, sp, #12	@ tmp591,,
ARM GAS  /tmp/ccwNEFwB.s 			page 22


 939 049c 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 940 049e 03AB     		add	r3, sp, #12	@ tmp592,,
 941 04a0 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 942 04a2 03AB     		add	r3, sp, #12	@ tmp593,,
 943 04a4 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 944 04a6 2322     		movs	r2, #35	@ tmp594,
 945 04a8 6A44     		add	r2, r2, sp	@ tmp594,
 946 04aa 1078     		ldrb	r0, [r2]	@ tmp595, DP
 947 04ac 0093     		str	r3, [sp]	@ D.4610,
 948 04ae 2B00     		movs	r3, r5	@, D.4610
 949 04b0 2200     		movs	r2, r4	@, D.4610
 950 04b2 FFF7FEFF 		bl	connect_digits	@
 951 04b6 0300     		movs	r3, r0	@ D.4611,
 952 04b8 1800     		movs	r0, r3	@, D.4611
 953 04ba FFF7FEFF 		bl	write_led	@
 260:code/main.c   ****         break;
 954              		.loc 1 260 0
 955 04be E4E1     		b	.L50	@
 956              	.L43:
 261:code/main.c   ****       case 0x04: // average speed
 262:code/main.c   **** 	      if(read_nTrip() == 0){
 957              		.loc 1 262 0
 958 04c0 FFF7FEFF 		bl	read_nTrip	@
 959 04c4 031E     		subs	r3, r0, #0	@ D.4611,,
 960 04c6 03D1     		bne	.L56	@,
 263:code/main.c   **** 		fork_counter = 0x00000000;
 961              		.loc 1 263 0
 962 04c8 0023     		movs	r3, #0	@ tmp596,
 963 04ca 1293     		str	r3, [sp, #72]	@ tmp596, fork_counter
 264:code/main.c   ****                 time = 0x00000000;
 964              		.loc 1 264 0
 965 04cc 0023     		movs	r3, #0	@ tmp597,
 966 04ce 1093     		str	r3, [sp, #64]	@ tmp597, time
 967              	.L56:
 265:code/main.c   ****               }
 266:code/main.c   ****               if(!read_nMode()){
 968              		.loc 1 266 0
 969 04d0 FFF7FEFF 		bl	read_nMode	@
 970 04d4 031E     		subs	r3, r0, #0	@ D.4611,,
 971 04d6 03D1     		bne	.L57	@,
 267:code/main.c   ****                 Mode = 0x05;
 972              		.loc 1 267 0
 973 04d8 4F23     		movs	r3, #79	@ tmp598,
 974 04da 6B44     		add	r3, r3, sp	@ tmp598,
 975 04dc 0522     		movs	r2, #5	@ tmp599,
 976 04de 1A70     		strb	r2, [r3]	@ tmp600, Mode
 977              	.L57:
 268:code/main.c   ****               }
 269:code/main.c   **** 
 270:code/main.c   ****               if (display){
 978              		.loc 1 270 0
 979 04e0 1F23     		movs	r3, #31	@ tmp601,
 980 04e2 6B44     		add	r3, r3, sp	@ tmp601,
 981 04e4 1B78     		ldrb	r3, [r3]	@ tmp602, display
 982 04e6 002B     		cmp	r3, #0	@ tmp602,
 983 04e8 31D0     		beq	.L58	@,
 271:code/main.c   ****                 DP = 0x02;
ARM GAS  /tmp/ccwNEFwB.s 			page 23


 984              		.loc 1 271 0
 985 04ea 2323     		movs	r3, #35	@ tmp603,
 986 04ec 6B44     		add	r3, r3, sp	@ tmp603,
 987 04ee 0222     		movs	r2, #2	@ tmp604,
 988 04f0 1A70     		strb	r2, [r3]	@ tmp605, DP
 272:code/main.c   ****                 digits[3] = 0x04;
 989              		.loc 1 272 0
 990 04f2 03AB     		add	r3, sp, #12	@ tmp606,,
 991 04f4 0422     		movs	r2, #4	@ tmp607,
 992 04f6 DA70     		strb	r2, [r3, #3]	@ tmp608, digits
 273:code/main.c   ****                 digits[2] = (av_ssni_419%1000)/100;
 993              		.loc 1 273 0
 994 04f8 0E9A     		ldr	r2, [sp, #56]	@ tmp609, av_ssni_419
 995 04fa FA23     		movs	r3, #250	@ tmp922,
 996 04fc 9900     		lsls	r1, r3, #2	@, tmp922,
 997 04fe 1000     		movs	r0, r2	@, tmp609
 998 0500 FFF7FEFF 		bl	__aeabi_uidivmod	@
 999 0504 0B00     		movs	r3, r1	@ tmp614,
 1000 0506 6421     		movs	r1, #100	@,
 1001 0508 1800     		movs	r0, r3	@, D.4611
 1002 050a FFF7FEFF 		bl	__aeabi_uidiv	@
 1003 050e 0300     		movs	r3, r0	@ tmp617,
 1004 0510 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1005 0512 03AB     		add	r3, sp, #12	@ tmp618,,
 1006 0514 9A70     		strb	r2, [r3, #2]	@ tmp619, digits
 274:code/main.c   ****                 digits[1] = (av_ssni_419%100)/10; 
 1007              		.loc 1 274 0
 1008 0516 0E9B     		ldr	r3, [sp, #56]	@ tmp620, av_ssni_419
 1009 0518 6421     		movs	r1, #100	@,
 1010 051a 1800     		movs	r0, r3	@, tmp620
 1011 051c FFF7FEFF 		bl	__aeabi_uidivmod	@
 1012 0520 0B00     		movs	r3, r1	@ tmp625,
 1013 0522 0A21     		movs	r1, #10	@,
 1014 0524 1800     		movs	r0, r3	@, D.4611
 1015 0526 FFF7FEFF 		bl	__aeabi_uidiv	@
 1016 052a 0300     		movs	r3, r0	@ tmp628,
 1017 052c DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1018 052e 03AB     		add	r3, sp, #12	@ tmp629,,
 1019 0530 5A70     		strb	r2, [r3, #1]	@ tmp630, digits
 275:code/main.c   ****                 digits[0] = (av_ssni_419%100)%10;
 1020              		.loc 1 275 0
 1021 0532 0E9B     		ldr	r3, [sp, #56]	@ tmp631, av_ssni_419
 1022 0534 6421     		movs	r1, #100	@,
 1023 0536 1800     		movs	r0, r3	@, tmp631
 1024 0538 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1025 053c 0B00     		movs	r3, r1	@ tmp636,
 1026 053e 0A21     		movs	r1, #10	@,
 1027 0540 1800     		movs	r0, r3	@, D.4611
 1028 0542 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1029 0546 0B00     		movs	r3, r1	@ tmp641,
 1030 0548 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1031 054a 03AB     		add	r3, sp, #12	@ tmp642,,
 1032 054c 1A70     		strb	r2, [r3]	@ tmp643, digits
 1033              	.L58:
 276:code/main.c   ****               }
 277:code/main.c   **** 
 278:code/main.c   **** 	      write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
ARM GAS  /tmp/ccwNEFwB.s 			page 24


 1034              		.loc 1 278 0
 1035 054e 03AB     		add	r3, sp, #12	@ tmp644,,
 1036 0550 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 1037 0552 03AB     		add	r3, sp, #12	@ tmp645,,
 1038 0554 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 1039 0556 03AB     		add	r3, sp, #12	@ tmp646,,
 1040 0558 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 1041 055a 03AB     		add	r3, sp, #12	@ tmp647,,
 1042 055c 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 1043 055e 2322     		movs	r2, #35	@ tmp648,
 1044 0560 6A44     		add	r2, r2, sp	@ tmp648,
 1045 0562 1078     		ldrb	r0, [r2]	@ tmp649, DP
 1046 0564 0093     		str	r3, [sp]	@ D.4610,
 1047 0566 2B00     		movs	r3, r5	@, D.4610
 1048 0568 2200     		movs	r2, r4	@, D.4610
 1049 056a FFF7FEFF 		bl	connect_digits	@
 1050 056e 0300     		movs	r3, r0	@ D.4611,
 1051 0570 1800     		movs	r0, r3	@, D.4611
 1052 0572 FFF7FEFF 		bl	write_led	@
 279:code/main.c   ****         break;
 1053              		.loc 1 279 0
 1054 0576 88E1     		b	.L50	@
 1055              	.L79:
 1056              		.align	2
 1057              	.L78:
 1058 0578 00000000 		.word	.L39
 1059              	.L44:
 280:code/main.c   ****       case 0x05: // max speed
 281:code/main.c   ****               if(read_nTrip() == 0){
 1060              		.loc 1 281 0
 1061 057c FFF7FEFF 		bl	read_nTrip	@
 1062 0580 031E     		subs	r3, r0, #0	@ D.4611,,
 1063 0582 01D1     		bne	.L59	@,
 282:code/main.c   **** 		max_speed = 0x00000000;
 1064              		.loc 1 282 0
 1065 0584 0023     		movs	r3, #0	@ tmp650,
 1066 0586 0D93     		str	r3, [sp, #52]	@ tmp650, max_speed
 1067              	.L59:
 283:code/main.c   ****               }
 284:code/main.c   ****               if(!read_nMode()){
 1068              		.loc 1 284 0
 1069 0588 FFF7FEFF 		bl	read_nMode	@
 1070 058c 031E     		subs	r3, r0, #0	@ D.4611,,
 1071 058e 03D1     		bne	.L60	@,
 285:code/main.c   ****                 Mode = 0x06;
 1072              		.loc 1 285 0
 1073 0590 4F23     		movs	r3, #79	@ tmp651,
 1074 0592 6B44     		add	r3, r3, sp	@ tmp651,
 1075 0594 0622     		movs	r2, #6	@ tmp652,
 1076 0596 1A70     		strb	r2, [r3]	@ tmp653, Mode
 1077              	.L60:
 286:code/main.c   ****               }
 287:code/main.c   **** 
 288:code/main.c   ****               DP = 0x02;
 1078              		.loc 1 288 0
 1079 0598 2323     		movs	r3, #35	@ tmp654,
 1080 059a 6B44     		add	r3, r3, sp	@ tmp654,
ARM GAS  /tmp/ccwNEFwB.s 			page 25


 1081 059c 0222     		movs	r2, #2	@ tmp655,
 1082 059e 1A70     		strb	r2, [r3]	@ tmp656, DP
 289:code/main.c   **** 	      digits[3] = 0x05;
 1083              		.loc 1 289 0
 1084 05a0 03AB     		add	r3, sp, #12	@ tmp657,,
 1085 05a2 0522     		movs	r2, #5	@ tmp658,
 1086 05a4 DA70     		strb	r2, [r3, #3]	@ tmp659, digits
 290:code/main.c   ****               digits[2] = (max_speed%1000)/100;
 1087              		.loc 1 290 0
 1088 05a6 0D9A     		ldr	r2, [sp, #52]	@ tmp660, max_speed
 1089 05a8 FA23     		movs	r3, #250	@ tmp921,
 1090 05aa 9900     		lsls	r1, r3, #2	@, tmp921,
 1091 05ac 1000     		movs	r0, r2	@, tmp660
 1092 05ae FFF7FEFF 		bl	__aeabi_uidivmod	@
 1093 05b2 0B00     		movs	r3, r1	@ tmp665,
 1094 05b4 6421     		movs	r1, #100	@,
 1095 05b6 1800     		movs	r0, r3	@, D.4611
 1096 05b8 FFF7FEFF 		bl	__aeabi_uidiv	@
 1097 05bc 0300     		movs	r3, r0	@ tmp668,
 1098 05be DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1099 05c0 03AB     		add	r3, sp, #12	@ tmp669,,
 1100 05c2 9A70     		strb	r2, [r3, #2]	@ tmp670, digits
 291:code/main.c   ****               digits[1] = (max_speed%100)/10; 
 1101              		.loc 1 291 0
 1102 05c4 0D9B     		ldr	r3, [sp, #52]	@ tmp671, max_speed
 1103 05c6 6421     		movs	r1, #100	@,
 1104 05c8 1800     		movs	r0, r3	@, tmp671
 1105 05ca FFF7FEFF 		bl	__aeabi_uidivmod	@
 1106 05ce 0B00     		movs	r3, r1	@ tmp676,
 1107 05d0 0A21     		movs	r1, #10	@,
 1108 05d2 1800     		movs	r0, r3	@, D.4611
 1109 05d4 FFF7FEFF 		bl	__aeabi_uidiv	@
 1110 05d8 0300     		movs	r3, r0	@ tmp679,
 1111 05da DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1112 05dc 03AB     		add	r3, sp, #12	@ tmp680,,
 1113 05de 5A70     		strb	r2, [r3, #1]	@ tmp681, digits
 292:code/main.c   ****               digits[0] = (max_speed%100)%10;
 1114              		.loc 1 292 0
 1115 05e0 0D9B     		ldr	r3, [sp, #52]	@ tmp682, max_speed
 1116 05e2 6421     		movs	r1, #100	@,
 1117 05e4 1800     		movs	r0, r3	@, tmp682
 1118 05e6 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1119 05ea 0B00     		movs	r3, r1	@ tmp687,
 1120 05ec 0A21     		movs	r1, #10	@,
 1121 05ee 1800     		movs	r0, r3	@, D.4611
 1122 05f0 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1123 05f4 0B00     		movs	r3, r1	@ tmp692,
 1124 05f6 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1125 05f8 03AB     		add	r3, sp, #12	@ tmp693,,
 1126 05fa 1A70     		strb	r2, [r3]	@ tmp694, digits
 293:code/main.c   **** 	
 294:code/main.c   **** 	      write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 1127              		.loc 1 294 0
 1128 05fc 03AB     		add	r3, sp, #12	@ tmp695,,
 1129 05fe D978     		ldrb	r1, [r3, #3]	@ D.4610,
 1130 0600 03AB     		add	r3, sp, #12	@ tmp696,,
 1131 0602 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
ARM GAS  /tmp/ccwNEFwB.s 			page 26


 1132 0604 03AB     		add	r3, sp, #12	@ tmp697,,
 1133 0606 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 1134 0608 03AB     		add	r3, sp, #12	@ tmp698,,
 1135 060a 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 1136 060c 2322     		movs	r2, #35	@ tmp699,
 1137 060e 6A44     		add	r2, r2, sp	@ tmp699,
 1138 0610 1078     		ldrb	r0, [r2]	@ tmp700, DP
 1139 0612 0093     		str	r3, [sp]	@ D.4610,
 1140 0614 2B00     		movs	r3, r5	@, D.4610
 1141 0616 2200     		movs	r2, r4	@, D.4610
 1142 0618 FFF7FEFF 		bl	connect_digits	@
 1143 061c 0300     		movs	r3, r0	@ D.4611,
 1144 061e 1800     		movs	r0, r3	@, D.4611
 1145 0620 FFF7FEFF 		bl	write_led	@
 295:code/main.c   ****         break;
 1146              		.loc 1 295 0
 1147 0624 31E1     		b	.L50	@
 1148              	.L45:
 296:code/main.c   ****       case 0x06: // calorie cost
 297:code/main.c   ****               if(read_nTrip() == 0){
 1149              		.loc 1 297 0
 1150 0626 FFF7FEFF 		bl	read_nTrip	@
 1151 062a 031E     		subs	r3, r0, #0	@ D.4611,,
 1152 062c 01D1     		bne	.L61	@,
 298:code/main.c   ****                 calorie = 0x00000000;
 1153              		.loc 1 298 0
 1154 062e 0023     		movs	r3, #0	@ tmp701,
 1155 0630 0993     		str	r3, [sp, #36]	@ tmp701, calorie
 1156              	.L61:
 299:code/main.c   ****               }
 300:code/main.c   ****               if(!read_nMode()){
 1157              		.loc 1 300 0
 1158 0632 FFF7FEFF 		bl	read_nMode	@
 1159 0636 031E     		subs	r3, r0, #0	@ D.4611,,
 1160 0638 03D1     		bne	.L62	@,
 301:code/main.c   ****                 Mode = 0x00;
 1161              		.loc 1 301 0
 1162 063a 4F23     		movs	r3, #79	@ tmp702,
 1163 063c 6B44     		add	r3, r3, sp	@ tmp702,
 1164 063e 0022     		movs	r2, #0	@ tmp703,
 1165 0640 1A70     		strb	r2, [r3]	@ tmp704, Mode
 1166              	.L62:
 302:code/main.c   ****               }
 303:code/main.c   **** 
 304:code/main.c   ****               DP = 0x01;
 1167              		.loc 1 304 0
 1168 0642 2323     		movs	r3, #35	@ tmp705,
 1169 0644 6B44     		add	r3, r3, sp	@ tmp705,
 1170 0646 0122     		movs	r2, #1	@ tmp706,
 1171 0648 1A70     		strb	r2, [r3]	@ tmp707, DP
 305:code/main.c   **** 	      digits[3] = 0x06;
 1172              		.loc 1 305 0
 1173 064a 03AB     		add	r3, sp, #12	@ tmp708,,
 1174 064c 0622     		movs	r2, #6	@ tmp709,
 1175 064e DA70     		strb	r2, [r3, #3]	@ tmp710, digits
 306:code/main.c   ****               digits[2] = (calorie%1000)/100;
 1176              		.loc 1 306 0
ARM GAS  /tmp/ccwNEFwB.s 			page 27


 1177 0650 099A     		ldr	r2, [sp, #36]	@ tmp711, calorie
 1178 0652 FA23     		movs	r3, #250	@ tmp920,
 1179 0654 9900     		lsls	r1, r3, #2	@, tmp920,
 1180 0656 1000     		movs	r0, r2	@, tmp711
 1181 0658 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1182 065c 0B00     		movs	r3, r1	@ tmp716,
 1183 065e 6421     		movs	r1, #100	@,
 1184 0660 1800     		movs	r0, r3	@, D.4611
 1185 0662 FFF7FEFF 		bl	__aeabi_uidiv	@
 1186 0666 0300     		movs	r3, r0	@ tmp719,
 1187 0668 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1188 066a 03AB     		add	r3, sp, #12	@ tmp720,,
 1189 066c 9A70     		strb	r2, [r3, #2]	@ tmp721, digits
 307:code/main.c   ****               digits[1] = (calorie%100)/10; 
 1190              		.loc 1 307 0
 1191 066e 099B     		ldr	r3, [sp, #36]	@ tmp722, calorie
 1192 0670 6421     		movs	r1, #100	@,
 1193 0672 1800     		movs	r0, r3	@, tmp722
 1194 0674 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1195 0678 0B00     		movs	r3, r1	@ tmp727,
 1196 067a 0A21     		movs	r1, #10	@,
 1197 067c 1800     		movs	r0, r3	@, D.4611
 1198 067e FFF7FEFF 		bl	__aeabi_uidiv	@
 1199 0682 0300     		movs	r3, r0	@ tmp730,
 1200 0684 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1201 0686 03AB     		add	r3, sp, #12	@ tmp731,,
 1202 0688 5A70     		strb	r2, [r3, #1]	@ tmp732, digits
 308:code/main.c   ****               digits[0] = (calorie%100)%10;
 1203              		.loc 1 308 0
 1204 068a 099B     		ldr	r3, [sp, #36]	@ tmp733, calorie
 1205 068c 6421     		movs	r1, #100	@,
 1206 068e 1800     		movs	r0, r3	@, tmp733
 1207 0690 FFF7FEFF 		bl	__aeabi_uidivmod	@
 1208 0694 0B00     		movs	r3, r1	@ tmp738,
 1209 0696 0A21     		movs	r1, #10	@,
 1210 0698 1800     		movs	r0, r3	@, D.4611
 1211 069a FFF7FEFF 		bl	__aeabi_uidivmod	@
 1212 069e 0B00     		movs	r3, r1	@ tmp743,
 1213 06a0 DAB2     		uxtb	r2, r3	@ D.4610, D.4611
 1214 06a2 03AB     		add	r3, sp, #12	@ tmp744,,
 1215 06a4 1A70     		strb	r2, [r3]	@ tmp745, digits
 309:code/main.c   **** 
 310:code/main.c   **** 	      write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 1216              		.loc 1 310 0
 1217 06a6 03AB     		add	r3, sp, #12	@ tmp746,,
 1218 06a8 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 1219 06aa 03AB     		add	r3, sp, #12	@ tmp747,,
 1220 06ac 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 1221 06ae 03AB     		add	r3, sp, #12	@ tmp748,,
 1222 06b0 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 1223 06b2 03AB     		add	r3, sp, #12	@ tmp749,,
 1224 06b4 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 1225 06b6 2322     		movs	r2, #35	@ tmp750,
 1226 06b8 6A44     		add	r2, r2, sp	@ tmp750,
 1227 06ba 1078     		ldrb	r0, [r2]	@ tmp751, DP
 1228 06bc 0093     		str	r3, [sp]	@ D.4610,
 1229 06be 2B00     		movs	r3, r5	@, D.4610
ARM GAS  /tmp/ccwNEFwB.s 			page 28


 1230 06c0 2200     		movs	r2, r4	@, D.4610
 1231 06c2 FFF7FEFF 		bl	connect_digits	@
 1232 06c6 0300     		movs	r3, r0	@ D.4611,
 1233 06c8 1800     		movs	r0, r3	@, D.4611
 1234 06ca FFF7FEFF 		bl	write_led	@
 311:code/main.c   ****         break;
 1235              		.loc 1 311 0
 1236 06ce DCE0     		b	.L50	@
 1237              	.L46:
 312:code/main.c   ****       case 0x07: // set wheel size   (unit: cm)
 313:code/main.c   **** 	      if ( read_nMode() == 0 ) {
 1238              		.loc 1 313 0
 1239 06d0 FFF7FEFF 		bl	read_nMode	@
 1240 06d4 031E     		subs	r3, r0, #0	@ D.4611,,
 1241 06d6 21D1     		bne	.L63	@,
 314:code/main.c   ****                 if (digit_index!=0x00) {
 1242              		.loc 1 314 0
 1243 06d8 2223     		movs	r3, #34	@ tmp752,
 1244 06da 6B44     		add	r3, r3, sp	@ tmp752,
 1245 06dc 1B78     		ldrb	r3, [r3]	@ tmp753, digit_index
 1246 06de 002B     		cmp	r3, #0	@ tmp753,
 1247 06e0 07D0     		beq	.L64	@,
 315:code/main.c   ****                   digit_index--;
 1248              		.loc 1 315 0
 1249 06e2 2223     		movs	r3, #34	@ tmp754,
 1250 06e4 6B44     		add	r3, r3, sp	@ tmp754,
 1251 06e6 1A78     		ldrb	r2, [r3]	@ D.4610, digit_index
 1252 06e8 2223     		movs	r3, #34	@ tmp755,
 1253 06ea 6B44     		add	r3, r3, sp	@ tmp755,
 1254 06ec 013A     		subs	r2, r2, #1	@ tmp756,
 1255 06ee 1A70     		strb	r2, [r3]	@ tmp757, digit_index
 1256 06f0 14E0     		b	.L63	@
 1257              	.L64:
 316:code/main.c   ****                 }else {
 317:code/main.c   ****                   Mode = 0x00;
 1258              		.loc 1 317 0
 1259 06f2 4F23     		movs	r3, #79	@ tmp758,
 1260 06f4 6B44     		add	r3, r3, sp	@ tmp758,
 1261 06f6 0022     		movs	r2, #0	@ tmp759,
 1262 06f8 1A70     		strb	r2, [r3]	@ tmp760, Mode
 318:code/main.c   ****                   wheel_size = digits[2]*100 + digits[1]*10 + digits[0];
 1263              		.loc 1 318 0
 1264 06fa 03AB     		add	r3, sp, #12	@ tmp761,,
 1265 06fc 9B78     		ldrb	r3, [r3, #2]	@ D.4610,
 1266 06fe 1A00     		movs	r2, r3	@ D.4612, D.4610
 1267 0700 6423     		movs	r3, #100	@ tmp762,
 1268 0702 5A43     		muls	r2, r3	@ D.4612, tmp762
 1269 0704 03AB     		add	r3, sp, #12	@ tmp763,,
 1270 0706 5B78     		ldrb	r3, [r3, #1]	@ D.4610,
 1271 0708 1900     		movs	r1, r3	@ D.4612, D.4610
 1272 070a 0B00     		movs	r3, r1	@ tmp764, D.4612
 1273 070c 9B00     		lsls	r3, r3, #2	@ tmp764, tmp764,
 1274 070e 5B18     		adds	r3, r3, r1	@ tmp764, tmp764, D.4612
 1275 0710 5B00     		lsls	r3, r3, #1	@ tmp765, tmp764,
 1276 0712 D318     		adds	r3, r2, r3	@ D.4612, D.4612, D.4612
 1277 0714 03AA     		add	r2, sp, #12	@ tmp766,,
 1278 0716 1278     		ldrb	r2, [r2]	@ D.4610, digits
ARM GAS  /tmp/ccwNEFwB.s 			page 29


 1279 0718 9B18     		adds	r3, r3, r2	@ D.4612, D.4612, D.4612
 1280 071a 0593     		str	r3, [sp, #20]	@ D.4612, wheel_size
 1281              	.L63:
 319:code/main.c   ****                 }
 320:code/main.c   ****               }
 321:code/main.c   **** 
 322:code/main.c   ****               if ( read_nTrip() == 0 ) {
 1282              		.loc 1 322 0
 1283 071c FFF7FEFF 		bl	read_nTrip	@
 1284 0720 031E     		subs	r3, r0, #0	@ D.4611,,
 1285 0722 18D1     		bne	.L65	@,
 323:code/main.c   ****                 digits[digit_index] += 1;
 1286              		.loc 1 323 0
 1287 0724 2223     		movs	r3, #34	@ tmp767,
 1288 0726 6B44     		add	r3, r3, sp	@ tmp767,
 1289 0728 1B78     		ldrb	r3, [r3]	@ D.4612, digit_index
 1290 072a 2222     		movs	r2, #34	@ tmp768,
 1291 072c 6A44     		add	r2, r2, sp	@ tmp768,
 1292 072e 1278     		ldrb	r2, [r2]	@ D.4612, digit_index
 1293 0730 03A9     		add	r1, sp, #12	@ tmp769,,
 1294 0732 8A5C     		ldrb	r2, [r1, r2]	@ D.4610, digits
 1295 0734 0132     		adds	r2, r2, #1	@ tmp770,
 1296 0736 D1B2     		uxtb	r1, r2	@ D.4610, tmp770
 1297 0738 03AA     		add	r2, sp, #12	@ tmp771,,
 1298 073a D154     		strb	r1, [r2, r3]	@ tmp772, digits
 324:code/main.c   ****                 if (digits[digit_index] > 0x09) {
 1299              		.loc 1 324 0
 1300 073c 2223     		movs	r3, #34	@ tmp773,
 1301 073e 6B44     		add	r3, r3, sp	@ tmp773,
 1302 0740 1B78     		ldrb	r3, [r3]	@ D.4612, digit_index
 1303 0742 03AA     		add	r2, sp, #12	@ tmp774,,
 1304 0744 D35C     		ldrb	r3, [r2, r3]	@ D.4610, digits
 1305 0746 092B     		cmp	r3, #9	@ D.4610,
 1306 0748 05D9     		bls	.L65	@,
 325:code/main.c   ****                   digits[digit_index] = 0x00;
 1307              		.loc 1 325 0
 1308 074a 2223     		movs	r3, #34	@ tmp775,
 1309 074c 6B44     		add	r3, r3, sp	@ tmp775,
 1310 074e 1B78     		ldrb	r3, [r3]	@ D.4612, digit_index
 1311 0750 03AA     		add	r2, sp, #12	@ tmp776,,
 1312 0752 0021     		movs	r1, #0	@ tmp777,
 1313 0754 D154     		strb	r1, [r2, r3]	@ tmp778, digits
 1314              	.L65:
 326:code/main.c   ****                 }
 327:code/main.c   ****               }  
 328:code/main.c   **** 
 329:code/main.c   ****               DP = 0x01;
 1315              		.loc 1 329 0
 1316 0756 2323     		movs	r3, #35	@ tmp779,
 1317 0758 6B44     		add	r3, r3, sp	@ tmp779,
 1318 075a 0122     		movs	r2, #1	@ tmp780,
 1319 075c 1A70     		strb	r2, [r3]	@ tmp781, DP
 330:code/main.c   **** 	      write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 1320              		.loc 1 330 0
 1321 075e 03AB     		add	r3, sp, #12	@ tmp782,,
 1322 0760 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 1323 0762 03AB     		add	r3, sp, #12	@ tmp783,,
ARM GAS  /tmp/ccwNEFwB.s 			page 30


 1324 0764 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 1325 0766 03AB     		add	r3, sp, #12	@ tmp784,,
 1326 0768 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 1327 076a 03AB     		add	r3, sp, #12	@ tmp785,,
 1328 076c 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 1329 076e 2322     		movs	r2, #35	@ tmp786,
 1330 0770 6A44     		add	r2, r2, sp	@ tmp786,
 1331 0772 1078     		ldrb	r0, [r2]	@ tmp787, DP
 1332 0774 0093     		str	r3, [sp]	@ D.4610,
 1333 0776 2B00     		movs	r3, r5	@, D.4610
 1334 0778 2200     		movs	r2, r4	@, D.4610
 1335 077a FFF7FEFF 		bl	connect_digits	@
 1336 077e 0300     		movs	r3, r0	@ D.4611,
 1337 0780 1800     		movs	r0, r3	@, D.4611
 1338 0782 FFF7FEFF 		bl	write_led	@
 331:code/main.c   ****         break;
 1339              		.loc 1 331 0
 1340 0786 80E0     		b	.L50	@
 1341              	.L47:
 332:code/main.c   ****       case 0x08: // set weight     (unit: kg)
 333:code/main.c   ****               if ( read_nMode() == 0 ) {
 1342              		.loc 1 333 0
 1343 0788 FFF7FEFF 		bl	read_nMode	@
 1344 078c 031E     		subs	r3, r0, #0	@ D.4611,,
 1345 078e 21D1     		bne	.L66	@,
 334:code/main.c   ****                 if (digit_index!=0x00){
 1346              		.loc 1 334 0
 1347 0790 2223     		movs	r3, #34	@ tmp788,
 1348 0792 6B44     		add	r3, r3, sp	@ tmp788,
 1349 0794 1B78     		ldrb	r3, [r3]	@ tmp789, digit_index
 1350 0796 002B     		cmp	r3, #0	@ tmp789,
 1351 0798 07D0     		beq	.L67	@,
 335:code/main.c   ****                   digit_index--;
 1352              		.loc 1 335 0
 1353 079a 2223     		movs	r3, #34	@ tmp790,
 1354 079c 6B44     		add	r3, r3, sp	@ tmp790,
 1355 079e 1A78     		ldrb	r2, [r3]	@ D.4610, digit_index
 1356 07a0 2223     		movs	r3, #34	@ tmp791,
 1357 07a2 6B44     		add	r3, r3, sp	@ tmp791,
 1358 07a4 013A     		subs	r2, r2, #1	@ tmp792,
 1359 07a6 1A70     		strb	r2, [r3]	@ tmp793, digit_index
 1360 07a8 14E0     		b	.L66	@
 1361              	.L67:
 336:code/main.c   ****                 }else {
 337:code/main.c   ****                   Mode = 0x00;
 1362              		.loc 1 337 0
 1363 07aa 4F23     		movs	r3, #79	@ tmp794,
 1364 07ac 6B44     		add	r3, r3, sp	@ tmp794,
 1365 07ae 0022     		movs	r2, #0	@ tmp795,
 1366 07b0 1A70     		strb	r2, [r3]	@ tmp796, Mode
 338:code/main.c   ****                   weight = digits[2]*100 + digits[1]*10 + digits[0];
 1367              		.loc 1 338 0
 1368 07b2 03AB     		add	r3, sp, #12	@ tmp797,,
 1369 07b4 9B78     		ldrb	r3, [r3, #2]	@ D.4610,
 1370 07b6 1A00     		movs	r2, r3	@ D.4612, D.4610
 1371 07b8 6423     		movs	r3, #100	@ tmp798,
 1372 07ba 5A43     		muls	r2, r3	@ D.4612, tmp798
ARM GAS  /tmp/ccwNEFwB.s 			page 31


 1373 07bc 03AB     		add	r3, sp, #12	@ tmp799,,
 1374 07be 5B78     		ldrb	r3, [r3, #1]	@ D.4610,
 1375 07c0 1900     		movs	r1, r3	@ D.4612, D.4610
 1376 07c2 0B00     		movs	r3, r1	@ tmp800, D.4612
 1377 07c4 9B00     		lsls	r3, r3, #2	@ tmp800, tmp800,
 1378 07c6 5B18     		adds	r3, r3, r1	@ tmp800, tmp800, D.4612
 1379 07c8 5B00     		lsls	r3, r3, #1	@ tmp801, tmp800,
 1380 07ca D318     		adds	r3, r2, r3	@ D.4612, D.4612, D.4612
 1381 07cc 03AA     		add	r2, sp, #12	@ tmp802,,
 1382 07ce 1278     		ldrb	r2, [r2]	@ D.4610, digits
 1383 07d0 9B18     		adds	r3, r3, r2	@ D.4612, D.4612, D.4612
 1384 07d2 0693     		str	r3, [sp, #24]	@ D.4612, weight
 1385              	.L66:
 339:code/main.c   ****                 }
 340:code/main.c   ****               }
 341:code/main.c   **** 
 342:code/main.c   ****               if ( read_nTrip() == 0 ) {
 1386              		.loc 1 342 0
 1387 07d4 FFF7FEFF 		bl	read_nTrip	@
 1388 07d8 031E     		subs	r3, r0, #0	@ D.4611,,
 1389 07da 18D1     		bne	.L68	@,
 343:code/main.c   ****                 digits[digit_index] += 1;
 1390              		.loc 1 343 0
 1391 07dc 2223     		movs	r3, #34	@ tmp803,
 1392 07de 6B44     		add	r3, r3, sp	@ tmp803,
 1393 07e0 1B78     		ldrb	r3, [r3]	@ D.4612, digit_index
 1394 07e2 2222     		movs	r2, #34	@ tmp804,
 1395 07e4 6A44     		add	r2, r2, sp	@ tmp804,
 1396 07e6 1278     		ldrb	r2, [r2]	@ D.4612, digit_index
 1397 07e8 03A9     		add	r1, sp, #12	@ tmp805,,
 1398 07ea 8A5C     		ldrb	r2, [r1, r2]	@ D.4610, digits
 1399 07ec 0132     		adds	r2, r2, #1	@ tmp806,
 1400 07ee D1B2     		uxtb	r1, r2	@ D.4610, tmp806
 1401 07f0 03AA     		add	r2, sp, #12	@ tmp807,,
 1402 07f2 D154     		strb	r1, [r2, r3]	@ tmp808, digits
 344:code/main.c   ****                 if (digits[digit_index] > 0x09) {
 1403              		.loc 1 344 0
 1404 07f4 2223     		movs	r3, #34	@ tmp809,
 1405 07f6 6B44     		add	r3, r3, sp	@ tmp809,
 1406 07f8 1B78     		ldrb	r3, [r3]	@ D.4612, digit_index
 1407 07fa 03AA     		add	r2, sp, #12	@ tmp810,,
 1408 07fc D35C     		ldrb	r3, [r2, r3]	@ D.4610, digits
 1409 07fe 092B     		cmp	r3, #9	@ D.4610,
 1410 0800 05D9     		bls	.L68	@,
 345:code/main.c   ****                   digits[digit_index] = 0x00;
 1411              		.loc 1 345 0
 1412 0802 2223     		movs	r3, #34	@ tmp811,
 1413 0804 6B44     		add	r3, r3, sp	@ tmp811,
 1414 0806 1B78     		ldrb	r3, [r3]	@ D.4612, digit_index
 1415 0808 03AA     		add	r2, sp, #12	@ tmp812,,
 1416 080a 0021     		movs	r1, #0	@ tmp813,
 1417 080c D154     		strb	r1, [r2, r3]	@ tmp814, digits
 1418              	.L68:
 346:code/main.c   ****                 }
 347:code/main.c   ****               }  
 348:code/main.c   **** 
 349:code/main.c   ****               DP = 0x01;
ARM GAS  /tmp/ccwNEFwB.s 			page 32


 1419              		.loc 1 349 0
 1420 080e 2323     		movs	r3, #35	@ tmp815,
 1421 0810 6B44     		add	r3, r3, sp	@ tmp815,
 1422 0812 0122     		movs	r2, #1	@ tmp816,
 1423 0814 1A70     		strb	r2, [r3]	@ tmp817, DP
 350:code/main.c   **** 	      write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 1424              		.loc 1 350 0
 1425 0816 03AB     		add	r3, sp, #12	@ tmp818,,
 1426 0818 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 1427 081a 03AB     		add	r3, sp, #12	@ tmp819,,
 1428 081c 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 1429 081e 03AB     		add	r3, sp, #12	@ tmp820,,
 1430 0820 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 1431 0822 03AB     		add	r3, sp, #12	@ tmp821,,
 1432 0824 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 1433 0826 2322     		movs	r2, #35	@ tmp822,
 1434 0828 6A44     		add	r2, r2, sp	@ tmp822,
 1435 082a 1078     		ldrb	r0, [r2]	@ tmp823, DP
 1436 082c 0093     		str	r3, [sp]	@ D.4610,
 1437 082e 2B00     		movs	r3, r5	@, D.4610
 1438 0830 2200     		movs	r2, r4	@, D.4610
 1439 0832 FFF7FEFF 		bl	connect_digits	@
 1440 0836 0300     		movs	r3, r0	@ D.4611,
 1441 0838 1800     		movs	r0, r3	@, D.4611
 1442 083a FFF7FEFF 		bl	write_led	@
 351:code/main.c   ****         break;
 1443              		.loc 1 351 0
 1444 083e 24E0     		b	.L50	@
 1445              	.L37:
 352:code/main.c   ****       default:  
 353:code/main.c   **** 
 354:code/main.c   ****             digits[0] = 0x08;
 1446              		.loc 1 354 0
 1447 0840 03AB     		add	r3, sp, #12	@ tmp824,,
 1448 0842 0822     		movs	r2, #8	@ tmp825,
 1449 0844 1A70     		strb	r2, [r3]	@ tmp826, digits
 355:code/main.c   ****             digits[1] = 0x08;
 1450              		.loc 1 355 0
 1451 0846 03AB     		add	r3, sp, #12	@ tmp827,,
 1452 0848 0822     		movs	r2, #8	@ tmp828,
 1453 084a 5A70     		strb	r2, [r3, #1]	@ tmp829, digits
 356:code/main.c   ****             digits[2] = 0x08;
 1454              		.loc 1 356 0
 1455 084c 03AB     		add	r3, sp, #12	@ tmp830,,
 1456 084e 0822     		movs	r2, #8	@ tmp831,
 1457 0850 9A70     		strb	r2, [r3, #2]	@ tmp832, digits
 357:code/main.c   ****             digits[3] = 0x00;
 1458              		.loc 1 357 0
 1459 0852 03AB     		add	r3, sp, #12	@ tmp833,,
 1460 0854 0022     		movs	r2, #0	@ tmp834,
 1461 0856 DA70     		strb	r2, [r3, #3]	@ tmp835, digits
 358:code/main.c   ****             DP = 0x07;
 1462              		.loc 1 358 0
 1463 0858 2323     		movs	r3, #35	@ tmp836,
 1464 085a 6B44     		add	r3, r3, sp	@ tmp836,
 1465 085c 0722     		movs	r2, #7	@ tmp837,
 1466 085e 1A70     		strb	r2, [r3]	@ tmp838, DP
ARM GAS  /tmp/ccwNEFwB.s 			page 33


 359:code/main.c   **** 
 360:code/main.c   ****             write_led(connect_digits(DP, digits[3], digits[2], digits[1], digits[0]));
 1467              		.loc 1 360 0
 1468 0860 03AB     		add	r3, sp, #12	@ tmp839,,
 1469 0862 D978     		ldrb	r1, [r3, #3]	@ D.4610,
 1470 0864 03AB     		add	r3, sp, #12	@ tmp840,,
 1471 0866 9C78     		ldrb	r4, [r3, #2]	@ D.4610,
 1472 0868 03AB     		add	r3, sp, #12	@ tmp841,,
 1473 086a 5D78     		ldrb	r5, [r3, #1]	@ D.4610,
 1474 086c 03AB     		add	r3, sp, #12	@ tmp842,,
 1475 086e 1B78     		ldrb	r3, [r3]	@ D.4610, digits
 1476 0870 2322     		movs	r2, #35	@ tmp843,
 1477 0872 6A44     		add	r2, r2, sp	@ tmp843,
 1478 0874 1078     		ldrb	r0, [r2]	@ tmp844, DP
 1479 0876 0093     		str	r3, [sp]	@ D.4610,
 1480 0878 2B00     		movs	r3, r5	@, D.4610
 1481 087a 2200     		movs	r2, r4	@, D.4610
 1482 087c FFF7FEFF 		bl	connect_digits	@
 1483 0880 0300     		movs	r3, r0	@ D.4611,
 1484 0882 1800     		movs	r0, r3	@, D.4611
 1485 0884 FFF7FEFF 		bl	write_led	@
 361:code/main.c   ****         break;
 1486              		.loc 1 361 0
 1487 0888 C046     		nop
 1488              	.L50:
 362:code/main.c   ****     }
 363:code/main.c   **** 
 364:code/main.c   **** 
 365:code/main.c   **** // accumulate the fork_counter and timer, calculate average speed
 366:code/main.c   ****     if (read_nFork() == 0) {
 1489              		.loc 1 366 0
 1490 088a FFF7FEFF 		bl	read_nFork	@
 1491 088e 031E     		subs	r3, r0, #0	@ D.4611,,
 1492 0890 32D1     		bne	.L69	@,
 367:code/main.c   **** 
 368:code/main.c   ****       if(read_fork_cnt() != 0){
 1493              		.loc 1 368 0
 1494 0892 FFF7FEFF 		bl	read_fork_cnt	@
 1495 0896 031E     		subs	r3, r0, #0	@ D.4611,,
 1496 0898 10D0     		beq	.L70	@,
 369:code/main.c   ****         fork_time = read_fork_cnt();
 1497              		.loc 1 369 0
 1498 089a FFF7FEFF 		bl	read_fork_cnt	@
 1499 089e 0300     		movs	r3, r0	@ tmp845,
 1500 08a0 0B93     		str	r3, [sp, #44]	@ tmp845, fork_time
 370:code/main.c   ****         //speedometer = wheel_size/(fork_time*30.52/1000)*360; 
 371:code/main.c   ****         speedometer = (wheel_size*11796/fork_time);  // unit: 100m/h
 1501              		.loc 1 371 0
 1502 08a2 059B     		ldr	r3, [sp, #20]	@ tmp846, wheel_size
 1503 08a4 3E4A     		ldr	r2, .L80	@ tmp847,
 1504 08a6 5343     		muls	r3, r2	@ D.4611, tmp847
 1505 08a8 0B99     		ldr	r1, [sp, #44]	@, fork_time
 1506 08aa 1800     		movs	r0, r3	@, D.4611
 1507 08ac FFF7FEFF 		bl	__aeabi_uidiv	@
 1508 08b0 0300     		movs	r3, r0	@ tmp851,
 1509 08b2 0C93     		str	r3, [sp, #48]	@ tmp851, speedometer
 372:code/main.c   ****         //av_ssni_419 = (av_ssni_419*(fork_counter)+speedometer)/(fork_counter+1);
ARM GAS  /tmp/ccwNEFwB.s 			page 34


 373:code/main.c   ****         //av_ssni_419 = (0.36*((fork_counter) * wheel_size))/(time);
 374:code/main.c   ****         fork_counter = fork_counter + 1;
 1510              		.loc 1 374 0
 1511 08b4 129B     		ldr	r3, [sp, #72]	@ tmp853, fork_counter
 1512 08b6 0133     		adds	r3, r3, #1	@ tmp852,
 1513 08b8 1293     		str	r3, [sp, #72]	@ tmp852, fork_counter
 1514 08ba 01E0     		b	.L71	@
 1515              	.L70:
 375:code/main.c   ****       }
 376:code/main.c   ****       else {
 377:code/main.c   ****         speedometer = 0;
 1516              		.loc 1 377 0
 1517 08bc 0023     		movs	r3, #0	@ tmp854,
 1518 08be 0C93     		str	r3, [sp, #48]	@ tmp854, speedometer
 1519              	.L71:
 378:code/main.c   ****       }
 379:code/main.c   **** 
 380:code/main.c   ****       accumulate_time += fork_time;
 1520              		.loc 1 380 0
 1521 08c0 0F9A     		ldr	r2, [sp, #60]	@ tmp856, accumulate_time
 1522 08c2 0B9B     		ldr	r3, [sp, #44]	@ tmp857, fork_time
 1523 08c4 D318     		adds	r3, r2, r3	@ tmp855, tmp856, tmp857
 1524 08c6 0F93     		str	r3, [sp, #60]	@ tmp855, accumulate_time
 381:code/main.c   **** 
 382:code/main.c   ****       if (DiscreteDisplay < 0x8000) {
 1525              		.loc 1 382 0
 1526 08c8 08AB     		add	r3, sp, #32	@ tmp858,,
 1527 08ca 0022     		movs	r2, #0	@ tmp926,
 1528 08cc 9B5E     		ldrsh	r3, [r3, r2]	@ D.4613, tmp858, tmp926
 1529 08ce 002B     		cmp	r3, #0	@ D.4613,
 1530 08d0 0BDB     		blt	.L72	@,
 383:code/main.c   ****         DiscreteDisplay += fork_time;
 1531              		.loc 1 383 0
 1532 08d2 0B9B     		ldr	r3, [sp, #44]	@ tmp860, fork_time
 1533 08d4 99B2     		uxth	r1, r3	@ D.4614, tmp859
 1534 08d6 08AB     		add	r3, sp, #32	@ tmp861,,
 1535 08d8 08AA     		add	r2, sp, #32	@ tmp862,,
 1536 08da 1288     		ldrh	r2, [r2]	@ tmp863, DiscreteDisplay
 1537 08dc 8A18     		adds	r2, r1, r2	@ tmp864, D.4614, tmp863
 1538 08de 1A80     		strh	r2, [r3]	@ tmp865, DiscreteDisplay
 384:code/main.c   ****         display = false;
 1539              		.loc 1 384 0
 1540 08e0 1F23     		movs	r3, #31	@ tmp866,
 1541 08e2 6B44     		add	r3, r3, sp	@ tmp866,
 1542 08e4 0022     		movs	r2, #0	@ tmp867,
 1543 08e6 1A70     		strb	r2, [r3]	@ tmp868, display
 1544 08e8 06E0     		b	.L69	@
 1545              	.L72:
 385:code/main.c   ****       }
 386:code/main.c   ****       else {
 387:code/main.c   ****         DiscreteDisplay = 0;
 1546              		.loc 1 387 0
 1547 08ea 08AB     		add	r3, sp, #32	@ tmp869,,
 1548 08ec 0022     		movs	r2, #0	@ tmp870,
 1549 08ee 1A80     		strh	r2, [r3]	@ tmp871, DiscreteDisplay
 388:code/main.c   ****         display = true; 
 1550              		.loc 1 388 0
ARM GAS  /tmp/ccwNEFwB.s 			page 35


 1551 08f0 1F23     		movs	r3, #31	@ tmp872,
 1552 08f2 6B44     		add	r3, r3, sp	@ tmp872,
 1553 08f4 0122     		movs	r2, #1	@ tmp873,
 1554 08f6 1A70     		strb	r2, [r3]	@ tmp874, display
 1555              	.L69:
 389:code/main.c   ****       }
 390:code/main.c   ****     }
 391:code/main.c   **** 
 392:code/main.c   **** // calculate the distance
 393:code/main.c   ****     odometer = fork_counter * wheel_size / 10000;
 1556              		.loc 1 393 0
 1557 08f8 129B     		ldr	r3, [sp, #72]	@ tmp875, fork_counter
 1558 08fa 059A     		ldr	r2, [sp, #20]	@ tmp876, wheel_size
 1559 08fc 5343     		muls	r3, r2	@ D.4611, tmp876
 1560 08fe 2949     		ldr	r1, .L80+4	@,
 1561 0900 1800     		movs	r0, r3	@, D.4611
 1562 0902 FFF7FEFF 		bl	__aeabi_uidiv	@
 1563 0906 0300     		movs	r3, r0	@ tmp879,
 1564 0908 1193     		str	r3, [sp, #68]	@ tmp879, odometer
 394:code/main.c   **** 
 395:code/main.c   **** // calculate the timer
 396:code/main.c   ****     //time = read_timer()/0x00008000;
 397:code/main.c   ****     time = accumulate_time/0x00008000;
 1565              		.loc 1 397 0
 1566 090a 0F9B     		ldr	r3, [sp, #60]	@ tmp881, accumulate_time
 1567 090c DB0B     		lsrs	r3, r3, #15	@ tmp880, tmp881,
 1568 090e 1093     		str	r3, [sp, #64]	@ tmp880, time
 398:code/main.c   **** 
 399:code/main.c   **** // compute the wheel speed
 400:code/main.c   ****     if (speedometer > 0x000003E7){
 1569              		.loc 1 400 0
 1570 0910 0C9B     		ldr	r3, [sp, #48]	@ tmp882, speedometer
 1571 0912 254A     		ldr	r2, .L80+8	@ tmp883,
 1572 0914 9342     		cmp	r3, r2	@ tmp882, tmp883
 1573 0916 01D9     		bls	.L73	@,
 401:code/main.c   ****       speedometer = 0x000003E7;
 1574              		.loc 1 401 0
 1575 0918 234B     		ldr	r3, .L80+8	@ tmp884,
 1576 091a 0C93     		str	r3, [sp, #48]	@ tmp884, speedometer
 1577              	.L73:
 402:code/main.c   ****     }
 403:code/main.c   **** 
 404:code/main.c   ****   // compute the average wheel speed
 405:code/main.c   ****      av_ssni_419 = ((fork_counter) * wheel_size*11796)/(accumulate_time);
 1578              		.loc 1 405 0
 1579 091c 129B     		ldr	r3, [sp, #72]	@ tmp885, fork_counter
 1580 091e 059A     		ldr	r2, [sp, #20]	@ tmp886, wheel_size
 1581 0920 5343     		muls	r3, r2	@ D.4611, tmp886
 1582 0922 1F4A     		ldr	r2, .L80	@ tmp887,
 1583 0924 5343     		muls	r3, r2	@ D.4611, tmp887
 1584 0926 0F99     		ldr	r1, [sp, #60]	@, accumulate_time
 1585 0928 1800     		movs	r0, r3	@, D.4611
 1586 092a FFF7FEFF 		bl	__aeabi_uidiv	@
 1587 092e 0300     		movs	r3, r0	@ tmp891,
 1588 0930 0E93     		str	r3, [sp, #56]	@ tmp891, av_ssni_419
 406:code/main.c   **** 
 407:code/main.c   **** 
ARM GAS  /tmp/ccwNEFwB.s 			page 36


 408:code/main.c   **** // computer the pedal speed
 409:code/main.c   ****     //cadence_meter = 60/(read_pedal_cnt()*30.52/1000000);
 410:code/main.c   ****     cadence_meter = 1965924/read_pedal_cnt();
 1589              		.loc 1 410 0
 1590 0932 FFF7FEFF 		bl	read_pedal_cnt	@
 1591 0936 0300     		movs	r3, r0	@ D.4611,
 1592 0938 1900     		movs	r1, r3	@, D.4611
 1593 093a 1C48     		ldr	r0, .L80+12	@,
 1594 093c FFF7FEFF 		bl	__aeabi_uidiv	@
 1595 0940 0300     		movs	r3, r0	@ tmp894,
 1596 0942 0A93     		str	r3, [sp, #40]	@ tmp894, cadence_meter
 411:code/main.c   ****     if ((cadence_meter%5) != 0){
 1597              		.loc 1 411 0
 1598 0944 0A9B     		ldr	r3, [sp, #40]	@ tmp895, cadence_meter
 1599 0946 0521     		movs	r1, #5	@,
 1600 0948 1800     		movs	r0, r3	@, tmp895
 1601 094a FFF7FEFF 		bl	__aeabi_uidivmod	@
 1602 094e 0B1E     		subs	r3, r1, #0	@ tmp900,,
 1603 0950 0AD0     		beq	.L74	@,
 412:code/main.c   ****       cadence_meter = (cadence_meter/5+1)*5;
 1604              		.loc 1 412 0
 1605 0952 0A9B     		ldr	r3, [sp, #40]	@ tmp901, cadence_meter
 1606 0954 0521     		movs	r1, #5	@,
 1607 0956 1800     		movs	r0, r3	@, tmp901
 1608 0958 FFF7FEFF 		bl	__aeabi_uidiv	@
 1609 095c 0300     		movs	r3, r0	@ tmp904,
 1610 095e 5A1C     		adds	r2, r3, #1	@ D.4611, D.4611,
 1611 0960 1300     		movs	r3, r2	@ tmp905, D.4611
 1612 0962 9B00     		lsls	r3, r3, #2	@ tmp905, tmp905,
 1613 0964 9B18     		adds	r3, r3, r2	@ tmp906, tmp905, D.4611
 1614 0966 0A93     		str	r3, [sp, #40]	@ tmp906, cadence_meter
 1615              	.L74:
 413:code/main.c   ****     }               
 414:code/main.c   **** 
 415:code/main.c   ****     if (cadence_meter >= 0x000003E3){
 1616              		.loc 1 415 0
 1617 0968 0A9B     		ldr	r3, [sp, #40]	@ tmp907, cadence_meter
 1618 096a 114A     		ldr	r2, .L80+16	@ tmp908,
 1619 096c 9342     		cmp	r3, r2	@ tmp907, tmp908
 1620 096e 01D9     		bls	.L75	@,
 416:code/main.c   ****       cadence_meter = 0x000003E3;
 1621              		.loc 1 416 0
 1622 0970 104B     		ldr	r3, .L80+20	@ tmp909,
 1623 0972 0A93     		str	r3, [sp, #40]	@ tmp909, cadence_meter
 1624              	.L75:
 417:code/main.c   ****     }
 418:code/main.c   **** 
 419:code/main.c   **** // save the maximum speed 
 420:code/main.c   ****     if (speedometer >= max_speed){
 1625              		.loc 1 420 0
 1626 0974 0C9A     		ldr	r2, [sp, #48]	@ tmp910, speedometer
 1627 0976 0D9B     		ldr	r3, [sp, #52]	@ tmp911, max_speed
 1628 0978 9A42     		cmp	r2, r3	@ tmp910, tmp911
 1629 097a 01D3     		bcc	.L76	@,
 421:code/main.c   ****       max_speed = speedometer;
 1630              		.loc 1 421 0
 1631 097c 0C9B     		ldr	r3, [sp, #48]	@ tmp912, speedometer
ARM GAS  /tmp/ccwNEFwB.s 			page 37


 1632 097e 0D93     		str	r3, [sp, #52]	@ tmp912, max_speed
 1633              	.L76:
 422:code/main.c   ****     }
 423:code/main.c   **** 
 424:code/main.c   **** // compute the clorie 
 425:code/main.c   ****     calorie = weight * fork_counter * wheel_size*3/500000;
 1634              		.loc 1 425 0
 1635 0980 069B     		ldr	r3, [sp, #24]	@ tmp913, weight
 1636 0982 129A     		ldr	r2, [sp, #72]	@ tmp914, fork_counter
 1637 0984 5343     		muls	r3, r2	@ D.4611, tmp914
 1638 0986 059A     		ldr	r2, [sp, #20]	@ tmp915, wheel_size
 1639 0988 5A43     		muls	r2, r3	@ D.4611, D.4611
 1640 098a 1300     		movs	r3, r2	@ tmp916, D.4611
 1641 098c 5B00     		lsls	r3, r3, #1	@ tmp916, tmp916,
 1642 098e 9B18     		adds	r3, r3, r2	@ D.4611, tmp916, D.4611
 1643 0990 0949     		ldr	r1, .L80+24	@,
 1644 0992 1800     		movs	r0, r3	@, D.4611
 1645 0994 FFF7FEFF 		bl	__aeabi_uidiv	@
 1646 0998 0300     		movs	r3, r0	@ tmp919,
 1647 099a 0993     		str	r3, [sp, #36]	@ tmp919, calorie
 426:code/main.c   ****   }
 1648              		.loc 1 426 0
 1649 099c FFF7FFFB 		bl	.L77	@ far jump	@
 1650              	.L81:
 1651              		.align	2
 1652              	.L80:
 1653 09a0 142E0000 		.word	11796
 1654 09a4 10270000 		.word	10000
 1655 09a8 E7030000 		.word	999
 1656 09ac 64FF1D00 		.word	1965924
 1657 09b0 E2030000 		.word	994
 1658 09b4 E3030000 		.word	995
 1659 09b8 20A10700 		.word	500000
 1660              		.cfi_endproc
 1661              	.LFE9:
 1662              		.size	main, .-main
 1663              	.Letext0:
 1664              		.file 2 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/machine/_default_types.h"
 1665              		.file 3 "/srv/gcc-arm-none-eabi-5_4-2016q3/arm-none-eabi/include/sys/_stdint.h"
 1666              		.section	.debug_info,"",%progbits
 1667              	.Ldebug_info0:
 1668 0000 C1030000 		.4byte	0x3c1
 1669 0004 0200     		.2byte	0x2
 1670 0006 00000000 		.4byte	.Ldebug_abbrev0
 1671 000a 04       		.byte	0x4
 1672 000b 01       		.uleb128 0x1
 1673 000c 7F020000 		.4byte	.LASF53
 1674 0010 0C       		.byte	0xc
 1675 0011 1F010000 		.4byte	.LASF54
 1676 0015 CA000000 		.4byte	.LASF55
 1677 0019 00000000 		.4byte	.Ltext0
 1678 001d BC090000 		.4byte	.Letext0
 1679 0021 00000000 		.4byte	.Ldebug_line0
 1680 0025 02       		.uleb128 0x2
 1681 0026 01       		.byte	0x1
 1682 0027 06       		.byte	0x6
 1683 0028 74010000 		.4byte	.LASF0
ARM GAS  /tmp/ccwNEFwB.s 			page 38


 1684 002c 03       		.uleb128 0x3
 1685 002d 15010000 		.4byte	.LASF3
 1686 0031 02       		.byte	0x2
 1687 0032 1D       		.byte	0x1d
 1688 0033 37000000 		.4byte	0x37
 1689 0037 02       		.uleb128 0x2
 1690 0038 01       		.byte	0x1
 1691 0039 08       		.byte	0x8
 1692 003a 66010000 		.4byte	.LASF1
 1693 003e 02       		.uleb128 0x2
 1694 003f 02       		.byte	0x2
 1695 0040 05       		.byte	0x5
 1696 0041 0F000000 		.4byte	.LASF2
 1697 0045 03       		.uleb128 0x3
 1698 0046 4C000000 		.4byte	.LASF4
 1699 004a 02       		.byte	0x2
 1700 004b 2B       		.byte	0x2b
 1701 004c 50000000 		.4byte	0x50
 1702 0050 02       		.uleb128 0x2
 1703 0051 02       		.byte	0x2
 1704 0052 07       		.byte	0x7
 1705 0053 BB010000 		.4byte	.LASF5
 1706 0057 02       		.uleb128 0x2
 1707 0058 04       		.byte	0x4
 1708 0059 05       		.byte	0x5
 1709 005a B6000000 		.4byte	.LASF6
 1710 005e 03       		.uleb128 0x3
 1711 005f 3A000000 		.4byte	.LASF7
 1712 0063 02       		.byte	0x2
 1713 0064 41       		.byte	0x41
 1714 0065 69000000 		.4byte	0x69
 1715 0069 02       		.uleb128 0x2
 1716 006a 04       		.byte	0x4
 1717 006b 07       		.byte	0x7
 1718 006c 0B020000 		.4byte	.LASF8
 1719 0070 02       		.uleb128 0x2
 1720 0071 08       		.byte	0x8
 1721 0072 05       		.byte	0x5
 1722 0073 A8000000 		.4byte	.LASF9
 1723 0077 02       		.uleb128 0x2
 1724 0078 08       		.byte	0x8
 1725 0079 07       		.byte	0x7
 1726 007a 80010000 		.4byte	.LASF10
 1727 007e 04       		.uleb128 0x4
 1728 007f 04       		.byte	0x4
 1729 0080 05       		.byte	0x5
 1730 0081 696E7400 		.ascii	"int\000"
 1731 0085 02       		.uleb128 0x2
 1732 0086 04       		.byte	0x4
 1733 0087 07       		.byte	0x7
 1734 0088 A0010000 		.4byte	.LASF11
 1735 008c 03       		.uleb128 0x3
 1736 008d 71000000 		.4byte	.LASF12
 1737 0091 03       		.byte	0x3
 1738 0092 18       		.byte	0x18
 1739 0093 2C000000 		.4byte	0x2c
 1740 0097 03       		.uleb128 0x3
ARM GAS  /tmp/ccwNEFwB.s 			page 39


 1741 0098 AD010000 		.4byte	.LASF13
 1742 009c 03       		.byte	0x3
 1743 009d 24       		.byte	0x24
 1744 009e 45000000 		.4byte	0x45
 1745 00a2 03       		.uleb128 0x3
 1746 00a3 97010000 		.4byte	.LASF14
 1747 00a7 03       		.byte	0x3
 1748 00a8 30       		.byte	0x30
 1749 00a9 5E000000 		.4byte	0x5e
 1750 00ad 05       		.uleb128 0x5
 1751 00ae 01       		.byte	0x1
 1752 00af 22000000 		.4byte	.LASF56
 1753 00b3 01       		.byte	0x1
 1754 00b4 1C       		.byte	0x1c
 1755 00b5 01       		.byte	0x1
 1756 00b6 00000000 		.4byte	.LFB0
 1757 00ba 18000000 		.4byte	.LFE0
 1758 00be 00000000 		.4byte	.LLST0
 1759 00c2 01       		.byte	0x1
 1760 00c3 D6000000 		.4byte	0xd6
 1761 00c7 06       		.uleb128 0x6
 1762 00c8 57000000 		.4byte	.LASF22
 1763 00cc 01       		.byte	0x1
 1764 00cd 1C       		.byte	0x1c
 1765 00ce A2000000 		.4byte	0xa2
 1766 00d2 02       		.byte	0x2
 1767 00d3 91       		.byte	0x91
 1768 00d4 7C       		.sleb128 -4
 1769 00d5 00       		.byte	0
 1770 00d6 07       		.uleb128 0x7
 1771 00d7 01       		.byte	0x1
 1772 00d8 9D000000 		.4byte	.LASF15
 1773 00dc 01       		.byte	0x1
 1774 00dd 22       		.byte	0x22
 1775 00de 01       		.byte	0x1
 1776 00df A2000000 		.4byte	0xa2
 1777 00e3 18000000 		.4byte	.LFB1
 1778 00e7 28000000 		.4byte	.LFE1
 1779 00eb 02       		.byte	0x2
 1780 00ec 7D       		.byte	0x7d
 1781 00ed 00       		.sleb128 0
 1782 00ee 01       		.byte	0x1
 1783 00ef 07       		.uleb128 0x7
 1784 00f0 01       		.byte	0x1
 1785 00f1 3E010000 		.4byte	.LASF16
 1786 00f5 01       		.byte	0x1
 1787 00f6 27       		.byte	0x27
 1788 00f7 01       		.byte	0x1
 1789 00f8 A2000000 		.4byte	0xa2
 1790 00fc 28000000 		.4byte	.LFB2
 1791 0100 38000000 		.4byte	.LFE2
 1792 0104 02       		.byte	0x2
 1793 0105 7D       		.byte	0x7d
 1794 0106 00       		.sleb128 0
 1795 0107 01       		.byte	0x1
 1796 0108 07       		.uleb128 0x7
 1797 0109 01       		.byte	0x1
ARM GAS  /tmp/ccwNEFwB.s 			page 40


 1798 010a E6010000 		.4byte	.LASF17
 1799 010e 01       		.byte	0x1
 1800 010f 2C       		.byte	0x2c
 1801 0110 01       		.byte	0x1
 1802 0111 A2000000 		.4byte	0xa2
 1803 0115 38000000 		.4byte	.LFB3
 1804 0119 48000000 		.4byte	.LFE3
 1805 011d 02       		.byte	0x2
 1806 011e 7D       		.byte	0x7d
 1807 011f 00       		.sleb128 0
 1808 0120 01       		.byte	0x1
 1809 0121 07       		.uleb128 0x7
 1810 0122 01       		.byte	0x1
 1811 0123 12030000 		.4byte	.LASF18
 1812 0127 01       		.byte	0x1
 1813 0128 31       		.byte	0x31
 1814 0129 01       		.byte	0x1
 1815 012a A2000000 		.4byte	0xa2
 1816 012e 48000000 		.4byte	.LFB4
 1817 0132 58000000 		.4byte	.LFE4
 1818 0136 02       		.byte	0x2
 1819 0137 7D       		.byte	0x7d
 1820 0138 00       		.sleb128 0
 1821 0139 01       		.byte	0x1
 1822 013a 07       		.uleb128 0x7
 1823 013b 01       		.byte	0x1
 1824 013c BF000000 		.4byte	.LASF19
 1825 0140 01       		.byte	0x1
 1826 0141 44       		.byte	0x44
 1827 0142 01       		.byte	0x1
 1828 0143 A2000000 		.4byte	0xa2
 1829 0147 58000000 		.4byte	.LFB5
 1830 014b 68000000 		.4byte	.LFE5
 1831 014f 02       		.byte	0x2
 1832 0150 7D       		.byte	0x7d
 1833 0151 00       		.sleb128 0
 1834 0152 01       		.byte	0x1
 1835 0153 07       		.uleb128 0x7
 1836 0154 01       		.byte	0x1
 1837 0155 66000000 		.4byte	.LASF20
 1838 0159 01       		.byte	0x1
 1839 015a 49       		.byte	0x49
 1840 015b 01       		.byte	0x1
 1841 015c A2000000 		.4byte	0xa2
 1842 0160 68000000 		.4byte	.LFB6
 1843 0164 78000000 		.4byte	.LFE6
 1844 0168 02       		.byte	0x2
 1845 0169 7D       		.byte	0x7d
 1846 016a 00       		.sleb128 0
 1847 016b 01       		.byte	0x1
 1848 016c 07       		.uleb128 0x7
 1849 016d 01       		.byte	0x1
 1850 016e 47020000 		.4byte	.LASF21
 1851 0172 01       		.byte	0x1
 1852 0173 4E       		.byte	0x4e
 1853 0174 01       		.byte	0x1
 1854 0175 A2000000 		.4byte	0xa2
ARM GAS  /tmp/ccwNEFwB.s 			page 41


 1855 0179 78000000 		.4byte	.LFB7
 1856 017d 88000000 		.4byte	.LFE7
 1857 0181 02       		.byte	0x2
 1858 0182 7D       		.byte	0x7d
 1859 0183 00       		.sleb128 0
 1860 0184 01       		.byte	0x1
 1861 0185 08       		.uleb128 0x8
 1862 0186 01       		.byte	0x1
 1863 0187 00000000 		.4byte	.LASF28
 1864 018b 01       		.byte	0x1
 1865 018c 58       		.byte	0x58
 1866 018d 01       		.byte	0x1
 1867 018e A2000000 		.4byte	0xa2
 1868 0192 88000000 		.4byte	.LFB8
 1869 0196 FE000000 		.4byte	.LFE8
 1870 019a 20000000 		.4byte	.LLST1
 1871 019e 01       		.byte	0x1
 1872 019f 38020000 		.4byte	0x238
 1873 01a3 09       		.uleb128 0x9
 1874 01a4 445000   		.ascii	"DP\000"
 1875 01a7 01       		.byte	0x1
 1876 01a8 58       		.byte	0x58
 1877 01a9 8C000000 		.4byte	0x8c
 1878 01ad 02       		.byte	0x2
 1879 01ae 91       		.byte	0x91
 1880 01af 57       		.sleb128 -41
 1881 01b0 06       		.uleb128 0x6
 1882 01b1 45000000 		.4byte	.LASF23
 1883 01b5 01       		.byte	0x1
 1884 01b6 58       		.byte	0x58
 1885 01b7 8C000000 		.4byte	0x8c
 1886 01bb 02       		.byte	0x2
 1887 01bc 91       		.byte	0x91
 1888 01bd 56       		.sleb128 -42
 1889 01be 06       		.uleb128 0x6
 1890 01bf 78020000 		.4byte	.LASF24
 1891 01c3 01       		.byte	0x1
 1892 01c4 58       		.byte	0x58
 1893 01c5 8C000000 		.4byte	0x8c
 1894 01c9 02       		.byte	0x2
 1895 01ca 91       		.byte	0x91
 1896 01cb 55       		.sleb128 -43
 1897 01cc 06       		.uleb128 0x6
 1898 01cd 33000000 		.4byte	.LASF25
 1899 01d1 01       		.byte	0x1
 1900 01d2 58       		.byte	0x58
 1901 01d3 8C000000 		.4byte	0x8c
 1902 01d7 02       		.byte	0x2
 1903 01d8 91       		.byte	0x91
 1904 01d9 54       		.sleb128 -44
 1905 01da 06       		.uleb128 0x6
 1906 01db 2C000000 		.4byte	.LASF26
 1907 01df 01       		.byte	0x1
 1908 01e0 58       		.byte	0x58
 1909 01e1 8C000000 		.4byte	0x8c
 1910 01e5 02       		.byte	0x2
 1911 01e6 91       		.byte	0x91
ARM GAS  /tmp/ccwNEFwB.s 			page 42


 1912 01e7 00       		.sleb128 0
 1913 01e8 0A       		.uleb128 0xa
 1914 01e9 25020000 		.4byte	.LASF27
 1915 01ed 01       		.byte	0x1
 1916 01ee 59       		.byte	0x59
 1917 01ef A2000000 		.4byte	0xa2
 1918 01f3 02       		.byte	0x2
 1919 01f4 91       		.byte	0x91
 1920 01f5 6C       		.sleb128 -20
 1921 01f6 0B       		.uleb128 0xb
 1922 01f7 647000   		.ascii	"dp\000"
 1923 01fa 01       		.byte	0x1
 1924 01fb 5B       		.byte	0x5b
 1925 01fc A2000000 		.4byte	0xa2
 1926 0200 02       		.byte	0x2
 1927 0201 91       		.byte	0x91
 1928 0202 68       		.sleb128 -24
 1929 0203 0B       		.uleb128 0xb
 1930 0204 643300   		.ascii	"d3\000"
 1931 0207 01       		.byte	0x1
 1932 0208 5C       		.byte	0x5c
 1933 0209 A2000000 		.4byte	0xa2
 1934 020d 02       		.byte	0x2
 1935 020e 91       		.byte	0x91
 1936 020f 64       		.sleb128 -28
 1937 0210 0B       		.uleb128 0xb
 1938 0211 643200   		.ascii	"d2\000"
 1939 0214 01       		.byte	0x1
 1940 0215 5D       		.byte	0x5d
 1941 0216 A2000000 		.4byte	0xa2
 1942 021a 02       		.byte	0x2
 1943 021b 91       		.byte	0x91
 1944 021c 60       		.sleb128 -32
 1945 021d 0B       		.uleb128 0xb
 1946 021e 643100   		.ascii	"d1\000"
 1947 0221 01       		.byte	0x1
 1948 0222 5E       		.byte	0x5e
 1949 0223 A2000000 		.4byte	0xa2
 1950 0227 02       		.byte	0x2
 1951 0228 91       		.byte	0x91
 1952 0229 5C       		.sleb128 -36
 1953 022a 0B       		.uleb128 0xb
 1954 022b 643000   		.ascii	"d0\000"
 1955 022e 01       		.byte	0x1
 1956 022f 5F       		.byte	0x5f
 1957 0230 A2000000 		.4byte	0xa2
 1958 0234 02       		.byte	0x2
 1959 0235 91       		.byte	0x91
 1960 0236 58       		.sleb128 -40
 1961 0237 00       		.byte	0
 1962 0238 0C       		.uleb128 0xc
 1963 0239 01       		.byte	0x1
 1964 023a CE010000 		.4byte	.LASF29
 1965 023e 01       		.byte	0x1
 1966 023f 70       		.byte	0x70
 1967 0240 01       		.byte	0x1
 1968 0241 7E000000 		.4byte	0x7e
ARM GAS  /tmp/ccwNEFwB.s 			page 43


 1969 0245 00010000 		.4byte	.LFB9
 1970 0249 BC090000 		.4byte	.LFE9
 1971 024d 4C000000 		.4byte	.LLST2
 1972 0251 01       		.byte	0x1
 1973 0252 65030000 		.4byte	0x365
 1974 0256 0A       		.uleb128 0xa
 1975 0257 73020000 		.4byte	.LASF30
 1976 025b 01       		.byte	0x1
 1977 025c 72       		.byte	0x72
 1978 025d 8C000000 		.4byte	0x8c
 1979 0261 02       		.byte	0x2
 1980 0262 91       		.byte	0x91
 1981 0263 6F       		.sleb128 -17
 1982 0264 0A       		.uleb128 0xa
 1983 0265 3A020000 		.4byte	.LASF31
 1984 0269 01       		.byte	0x1
 1985 026a 74       		.byte	0x74
 1986 026b A2000000 		.4byte	0xa2
 1987 026f 02       		.byte	0x2
 1988 0270 91       		.byte	0x91
 1989 0271 68       		.sleb128 -24
 1990 0272 0A       		.uleb128 0xa
 1991 0273 5D000000 		.4byte	.LASF32
 1992 0277 01       		.byte	0x1
 1993 0278 75       		.byte	0x75
 1994 0279 A2000000 		.4byte	0xa2
 1995 027d 02       		.byte	0x2
 1996 027e 91       		.byte	0x91
 1997 027f 64       		.sleb128 -28
 1998 0280 0A       		.uleb128 0xa
 1999 0281 B6010000 		.4byte	.LASF33
 2000 0285 01       		.byte	0x1
 2001 0286 78       		.byte	0x78
 2002 0287 A2000000 		.4byte	0xa2
 2003 028b 02       		.byte	0x2
 2004 028c 91       		.byte	0x91
 2005 028d 60       		.sleb128 -32
 2006 028e 0A       		.uleb128 0xa
 2007 028f 4A010000 		.4byte	.LASF34
 2008 0293 01       		.byte	0x1
 2009 0294 79       		.byte	0x79
 2010 0295 A2000000 		.4byte	0xa2
 2011 0299 02       		.byte	0x2
 2012 029a 91       		.byte	0x91
 2013 029b 5C       		.sleb128 -36
 2014 029c 0A       		.uleb128 0xa
 2015 029d F4010000 		.4byte	.LASF35
 2016 02a1 01       		.byte	0x1
 2017 02a2 7A       		.byte	0x7a
 2018 02a3 A2000000 		.4byte	0xa2
 2019 02a7 03       		.byte	0x3
 2020 02a8 91       		.byte	0x91
 2021 02a9 B07F     		.sleb128 -80
 2022 02ab 0A       		.uleb128 0xa
 2023 02ac 5A010000 		.4byte	.LASF36
 2024 02b0 01       		.byte	0x1
 2025 02b1 7D       		.byte	0x7d
ARM GAS  /tmp/ccwNEFwB.s 			page 44


 2026 02b2 A2000000 		.4byte	0xa2
 2027 02b6 02       		.byte	0x2
 2028 02b7 91       		.byte	0x91
 2029 02b8 58       		.sleb128 -40
 2030 02b9 0A       		.uleb128 0xa
 2031 02ba 5C020000 		.4byte	.LASF37
 2032 02be 01       		.byte	0x1
 2033 02bf 80       		.byte	0x80
 2034 02c0 A2000000 		.4byte	0xa2
 2035 02c4 02       		.byte	0x2
 2036 02c5 91       		.byte	0x91
 2037 02c6 54       		.sleb128 -44
 2038 02c7 0A       		.uleb128 0xa
 2039 02c8 79000000 		.4byte	.LASF38
 2040 02cc 01       		.byte	0x1
 2041 02cd 83       		.byte	0x83
 2042 02ce A2000000 		.4byte	0xa2
 2043 02d2 02       		.byte	0x2
 2044 02d3 91       		.byte	0x91
 2045 02d4 50       		.sleb128 -48
 2046 02d5 0A       		.uleb128 0xa
 2047 02d6 85000000 		.4byte	.LASF39
 2048 02da 01       		.byte	0x1
 2049 02db 86       		.byte	0x86
 2050 02dc A2000000 		.4byte	0xa2
 2051 02e0 02       		.byte	0x2
 2052 02e1 91       		.byte	0x91
 2053 02e2 4C       		.sleb128 -52
 2054 02e3 0A       		.uleb128 0xa
 2055 02e4 8F000000 		.4byte	.LASF40
 2056 02e8 01       		.byte	0x1
 2057 02e9 8A       		.byte	0x8a
 2058 02ea A2000000 		.4byte	0xa2
 2059 02ee 02       		.byte	0x2
 2060 02ef 91       		.byte	0x91
 2061 02f0 48       		.sleb128 -56
 2062 02f1 0A       		.uleb128 0xa
 2063 02f2 0A030000 		.4byte	.LASF41
 2064 02f6 01       		.byte	0x1
 2065 02f7 8D       		.byte	0x8d
 2066 02f8 A2000000 		.4byte	0xa2
 2067 02fc 02       		.byte	0x2
 2068 02fd 91       		.byte	0x91
 2069 02fe 44       		.sleb128 -60
 2070 02ff 0A       		.uleb128 0xa
 2071 0300 2B010000 		.4byte	.LASF42
 2072 0304 01       		.byte	0x1
 2073 0305 90       		.byte	0x90
 2074 0306 65030000 		.4byte	0x365
 2075 030a 03       		.byte	0x3
 2076 030b 91       		.byte	0x91
 2077 030c AC7F     		.sleb128 -84
 2078 030e 0B       		.uleb128 0xb
 2079 030f 445000   		.ascii	"DP\000"
 2080 0312 01       		.byte	0x1
 2081 0313 95       		.byte	0x95
 2082 0314 8C000000 		.4byte	0x8c
ARM GAS  /tmp/ccwNEFwB.s 			page 45


 2083 0318 02       		.byte	0x2
 2084 0319 91       		.byte	0x91
 2085 031a 43       		.sleb128 -61
 2086 031b 0A       		.uleb128 0xa
 2087 031c 32010000 		.4byte	.LASF43
 2088 0320 01       		.byte	0x1
 2089 0321 96       		.byte	0x96
 2090 0322 8C000000 		.4byte	0x8c
 2091 0326 02       		.byte	0x2
 2092 0327 91       		.byte	0x91
 2093 0328 42       		.sleb128 -62
 2094 0329 0A       		.uleb128 0xa
 2095 032a FB010000 		.4byte	.LASF44
 2096 032e 01       		.byte	0x1
 2097 032f 97       		.byte	0x97
 2098 0330 97000000 		.4byte	0x97
 2099 0334 02       		.byte	0x2
 2100 0335 91       		.byte	0x91
 2101 0336 40       		.sleb128 -64
 2102 0337 0A       		.uleb128 0xa
 2103 0338 1D020000 		.4byte	.LASF45
 2104 033c 01       		.byte	0x1
 2105 033d 98       		.byte	0x98
 2106 033e 7C030000 		.4byte	0x37c
 2107 0342 03       		.byte	0x3
 2108 0343 91       		.byte	0x91
 2109 0344 BF7F     		.sleb128 -65
 2110 0346 0A       		.uleb128 0xa
 2111 0347 03030000 		.4byte	.LASF46
 2112 034b 01       		.byte	0x1
 2113 034c 9E       		.byte	0x9e
 2114 034d A2000000 		.4byte	0xa2
 2115 0351 03       		.byte	0x3
 2116 0352 91       		.byte	0x91
 2117 0353 B87F     		.sleb128 -72
 2118 0355 0A       		.uleb128 0xa
 2119 0356 21030000 		.4byte	.LASF47
 2120 035a 01       		.byte	0x1
 2121 035b 9F       		.byte	0x9f
 2122 035c A2000000 		.4byte	0xa2
 2123 0360 03       		.byte	0x3
 2124 0361 91       		.byte	0x91
 2125 0362 B47F     		.sleb128 -76
 2126 0364 00       		.byte	0
 2127 0365 0D       		.uleb128 0xd
 2128 0366 8C000000 		.4byte	0x8c
 2129 036a 75030000 		.4byte	0x375
 2130 036e 0E       		.uleb128 0xe
 2131 036f 75030000 		.4byte	0x375
 2132 0373 03       		.byte	0x3
 2133 0374 00       		.byte	0
 2134 0375 02       		.uleb128 0x2
 2135 0376 04       		.byte	0x4
 2136 0377 07       		.byte	0x7
 2137 0378 19000000 		.4byte	.LASF48
 2138 037c 02       		.uleb128 0x2
 2139 037d 01       		.byte	0x1
ARM GAS  /tmp/ccwNEFwB.s 			page 46


 2140 037e 02       		.byte	0x2
 2141 037f D3010000 		.4byte	.LASF49
 2142 0383 0F       		.uleb128 0xf
 2143 0384 66020000 		.4byte	.LASF50
 2144 0388 01       		.byte	0x1
 2145 0389 12       		.byte	0x12
 2146 038a 95030000 		.4byte	0x395
 2147 038e 01       		.byte	0x1
 2148 038f 05       		.byte	0x5
 2149 0390 03       		.byte	0x3
 2150 0391 00000000 		.4byte	BUTTONS_REGS
 2151 0395 10       		.uleb128 0x10
 2152 0396 04       		.byte	0x4
 2153 0397 9B030000 		.4byte	0x39b
 2154 039b 11       		.uleb128 0x11
 2155 039c A2000000 		.4byte	0xa2
 2156 03a0 0F       		.uleb128 0xf
 2157 03a1 D9010000 		.4byte	.LASF51
 2158 03a5 01       		.byte	0x1
 2159 03a6 13       		.byte	0x13
 2160 03a7 95030000 		.4byte	0x395
 2161 03ab 01       		.byte	0x1
 2162 03ac 05       		.byte	0x5
 2163 03ad 03       		.byte	0x3
 2164 03ae 00000000 		.4byte	SENSORS_REGS
 2165 03b2 0F       		.uleb128 0xf
 2166 03b3 31020000 		.4byte	.LASF52
 2167 03b7 01       		.byte	0x1
 2168 03b8 14       		.byte	0x14
 2169 03b9 95030000 		.4byte	0x395
 2170 03bd 01       		.byte	0x1
 2171 03be 05       		.byte	0x5
 2172 03bf 03       		.byte	0x3
 2173 03c0 00000000 		.4byte	LED_REGS
 2174 03c4 00       		.byte	0
 2175              		.section	.debug_abbrev,"",%progbits
 2176              	.Ldebug_abbrev0:
 2177 0000 01       		.uleb128 0x1
 2178 0001 11       		.uleb128 0x11
 2179 0002 01       		.byte	0x1
 2180 0003 25       		.uleb128 0x25
 2181 0004 0E       		.uleb128 0xe
 2182 0005 13       		.uleb128 0x13
 2183 0006 0B       		.uleb128 0xb
 2184 0007 03       		.uleb128 0x3
 2185 0008 0E       		.uleb128 0xe
 2186 0009 1B       		.uleb128 0x1b
 2187 000a 0E       		.uleb128 0xe
 2188 000b 11       		.uleb128 0x11
 2189 000c 01       		.uleb128 0x1
 2190 000d 12       		.uleb128 0x12
 2191 000e 01       		.uleb128 0x1
 2192 000f 10       		.uleb128 0x10
 2193 0010 06       		.uleb128 0x6
 2194 0011 00       		.byte	0
 2195 0012 00       		.byte	0
 2196 0013 02       		.uleb128 0x2
ARM GAS  /tmp/ccwNEFwB.s 			page 47


 2197 0014 24       		.uleb128 0x24
 2198 0015 00       		.byte	0
 2199 0016 0B       		.uleb128 0xb
 2200 0017 0B       		.uleb128 0xb
 2201 0018 3E       		.uleb128 0x3e
 2202 0019 0B       		.uleb128 0xb
 2203 001a 03       		.uleb128 0x3
 2204 001b 0E       		.uleb128 0xe
 2205 001c 00       		.byte	0
 2206 001d 00       		.byte	0
 2207 001e 03       		.uleb128 0x3
 2208 001f 16       		.uleb128 0x16
 2209 0020 00       		.byte	0
 2210 0021 03       		.uleb128 0x3
 2211 0022 0E       		.uleb128 0xe
 2212 0023 3A       		.uleb128 0x3a
 2213 0024 0B       		.uleb128 0xb
 2214 0025 3B       		.uleb128 0x3b
 2215 0026 0B       		.uleb128 0xb
 2216 0027 49       		.uleb128 0x49
 2217 0028 13       		.uleb128 0x13
 2218 0029 00       		.byte	0
 2219 002a 00       		.byte	0
 2220 002b 04       		.uleb128 0x4
 2221 002c 24       		.uleb128 0x24
 2222 002d 00       		.byte	0
 2223 002e 0B       		.uleb128 0xb
 2224 002f 0B       		.uleb128 0xb
 2225 0030 3E       		.uleb128 0x3e
 2226 0031 0B       		.uleb128 0xb
 2227 0032 03       		.uleb128 0x3
 2228 0033 08       		.uleb128 0x8
 2229 0034 00       		.byte	0
 2230 0035 00       		.byte	0
 2231 0036 05       		.uleb128 0x5
 2232 0037 2E       		.uleb128 0x2e
 2233 0038 01       		.byte	0x1
 2234 0039 3F       		.uleb128 0x3f
 2235 003a 0C       		.uleb128 0xc
 2236 003b 03       		.uleb128 0x3
 2237 003c 0E       		.uleb128 0xe
 2238 003d 3A       		.uleb128 0x3a
 2239 003e 0B       		.uleb128 0xb
 2240 003f 3B       		.uleb128 0x3b
 2241 0040 0B       		.uleb128 0xb
 2242 0041 27       		.uleb128 0x27
 2243 0042 0C       		.uleb128 0xc
 2244 0043 11       		.uleb128 0x11
 2245 0044 01       		.uleb128 0x1
 2246 0045 12       		.uleb128 0x12
 2247 0046 01       		.uleb128 0x1
 2248 0047 40       		.uleb128 0x40
 2249 0048 06       		.uleb128 0x6
 2250 0049 9742     		.uleb128 0x2117
 2251 004b 0C       		.uleb128 0xc
 2252 004c 01       		.uleb128 0x1
 2253 004d 13       		.uleb128 0x13
ARM GAS  /tmp/ccwNEFwB.s 			page 48


 2254 004e 00       		.byte	0
 2255 004f 00       		.byte	0
 2256 0050 06       		.uleb128 0x6
 2257 0051 05       		.uleb128 0x5
 2258 0052 00       		.byte	0
 2259 0053 03       		.uleb128 0x3
 2260 0054 0E       		.uleb128 0xe
 2261 0055 3A       		.uleb128 0x3a
 2262 0056 0B       		.uleb128 0xb
 2263 0057 3B       		.uleb128 0x3b
 2264 0058 0B       		.uleb128 0xb
 2265 0059 49       		.uleb128 0x49
 2266 005a 13       		.uleb128 0x13
 2267 005b 02       		.uleb128 0x2
 2268 005c 0A       		.uleb128 0xa
 2269 005d 00       		.byte	0
 2270 005e 00       		.byte	0
 2271 005f 07       		.uleb128 0x7
 2272 0060 2E       		.uleb128 0x2e
 2273 0061 00       		.byte	0
 2274 0062 3F       		.uleb128 0x3f
 2275 0063 0C       		.uleb128 0xc
 2276 0064 03       		.uleb128 0x3
 2277 0065 0E       		.uleb128 0xe
 2278 0066 3A       		.uleb128 0x3a
 2279 0067 0B       		.uleb128 0xb
 2280 0068 3B       		.uleb128 0x3b
 2281 0069 0B       		.uleb128 0xb
 2282 006a 27       		.uleb128 0x27
 2283 006b 0C       		.uleb128 0xc
 2284 006c 49       		.uleb128 0x49
 2285 006d 13       		.uleb128 0x13
 2286 006e 11       		.uleb128 0x11
 2287 006f 01       		.uleb128 0x1
 2288 0070 12       		.uleb128 0x12
 2289 0071 01       		.uleb128 0x1
 2290 0072 40       		.uleb128 0x40
 2291 0073 0A       		.uleb128 0xa
 2292 0074 9742     		.uleb128 0x2117
 2293 0076 0C       		.uleb128 0xc
 2294 0077 00       		.byte	0
 2295 0078 00       		.byte	0
 2296 0079 08       		.uleb128 0x8
 2297 007a 2E       		.uleb128 0x2e
 2298 007b 01       		.byte	0x1
 2299 007c 3F       		.uleb128 0x3f
 2300 007d 0C       		.uleb128 0xc
 2301 007e 03       		.uleb128 0x3
 2302 007f 0E       		.uleb128 0xe
 2303 0080 3A       		.uleb128 0x3a
 2304 0081 0B       		.uleb128 0xb
 2305 0082 3B       		.uleb128 0x3b
 2306 0083 0B       		.uleb128 0xb
 2307 0084 27       		.uleb128 0x27
 2308 0085 0C       		.uleb128 0xc
 2309 0086 49       		.uleb128 0x49
 2310 0087 13       		.uleb128 0x13
ARM GAS  /tmp/ccwNEFwB.s 			page 49


 2311 0088 11       		.uleb128 0x11
 2312 0089 01       		.uleb128 0x1
 2313 008a 12       		.uleb128 0x12
 2314 008b 01       		.uleb128 0x1
 2315 008c 40       		.uleb128 0x40
 2316 008d 06       		.uleb128 0x6
 2317 008e 9742     		.uleb128 0x2117
 2318 0090 0C       		.uleb128 0xc
 2319 0091 01       		.uleb128 0x1
 2320 0092 13       		.uleb128 0x13
 2321 0093 00       		.byte	0
 2322 0094 00       		.byte	0
 2323 0095 09       		.uleb128 0x9
 2324 0096 05       		.uleb128 0x5
 2325 0097 00       		.byte	0
 2326 0098 03       		.uleb128 0x3
 2327 0099 08       		.uleb128 0x8
 2328 009a 3A       		.uleb128 0x3a
 2329 009b 0B       		.uleb128 0xb
 2330 009c 3B       		.uleb128 0x3b
 2331 009d 0B       		.uleb128 0xb
 2332 009e 49       		.uleb128 0x49
 2333 009f 13       		.uleb128 0x13
 2334 00a0 02       		.uleb128 0x2
 2335 00a1 0A       		.uleb128 0xa
 2336 00a2 00       		.byte	0
 2337 00a3 00       		.byte	0
 2338 00a4 0A       		.uleb128 0xa
 2339 00a5 34       		.uleb128 0x34
 2340 00a6 00       		.byte	0
 2341 00a7 03       		.uleb128 0x3
 2342 00a8 0E       		.uleb128 0xe
 2343 00a9 3A       		.uleb128 0x3a
 2344 00aa 0B       		.uleb128 0xb
 2345 00ab 3B       		.uleb128 0x3b
 2346 00ac 0B       		.uleb128 0xb
 2347 00ad 49       		.uleb128 0x49
 2348 00ae 13       		.uleb128 0x13
 2349 00af 02       		.uleb128 0x2
 2350 00b0 0A       		.uleb128 0xa
 2351 00b1 00       		.byte	0
 2352 00b2 00       		.byte	0
 2353 00b3 0B       		.uleb128 0xb
 2354 00b4 34       		.uleb128 0x34
 2355 00b5 00       		.byte	0
 2356 00b6 03       		.uleb128 0x3
 2357 00b7 08       		.uleb128 0x8
 2358 00b8 3A       		.uleb128 0x3a
 2359 00b9 0B       		.uleb128 0xb
 2360 00ba 3B       		.uleb128 0x3b
 2361 00bb 0B       		.uleb128 0xb
 2362 00bc 49       		.uleb128 0x49
 2363 00bd 13       		.uleb128 0x13
 2364 00be 02       		.uleb128 0x2
 2365 00bf 0A       		.uleb128 0xa
 2366 00c0 00       		.byte	0
 2367 00c1 00       		.byte	0
ARM GAS  /tmp/ccwNEFwB.s 			page 50


 2368 00c2 0C       		.uleb128 0xc
 2369 00c3 2E       		.uleb128 0x2e
 2370 00c4 01       		.byte	0x1
 2371 00c5 3F       		.uleb128 0x3f
 2372 00c6 0C       		.uleb128 0xc
 2373 00c7 03       		.uleb128 0x3
 2374 00c8 0E       		.uleb128 0xe
 2375 00c9 3A       		.uleb128 0x3a
 2376 00ca 0B       		.uleb128 0xb
 2377 00cb 3B       		.uleb128 0x3b
 2378 00cc 0B       		.uleb128 0xb
 2379 00cd 27       		.uleb128 0x27
 2380 00ce 0C       		.uleb128 0xc
 2381 00cf 49       		.uleb128 0x49
 2382 00d0 13       		.uleb128 0x13
 2383 00d1 11       		.uleb128 0x11
 2384 00d2 01       		.uleb128 0x1
 2385 00d3 12       		.uleb128 0x12
 2386 00d4 01       		.uleb128 0x1
 2387 00d5 40       		.uleb128 0x40
 2388 00d6 06       		.uleb128 0x6
 2389 00d7 9642     		.uleb128 0x2116
 2390 00d9 0C       		.uleb128 0xc
 2391 00da 01       		.uleb128 0x1
 2392 00db 13       		.uleb128 0x13
 2393 00dc 00       		.byte	0
 2394 00dd 00       		.byte	0
 2395 00de 0D       		.uleb128 0xd
 2396 00df 01       		.uleb128 0x1
 2397 00e0 01       		.byte	0x1
 2398 00e1 49       		.uleb128 0x49
 2399 00e2 13       		.uleb128 0x13
 2400 00e3 01       		.uleb128 0x1
 2401 00e4 13       		.uleb128 0x13
 2402 00e5 00       		.byte	0
 2403 00e6 00       		.byte	0
 2404 00e7 0E       		.uleb128 0xe
 2405 00e8 21       		.uleb128 0x21
 2406 00e9 00       		.byte	0
 2407 00ea 49       		.uleb128 0x49
 2408 00eb 13       		.uleb128 0x13
 2409 00ec 2F       		.uleb128 0x2f
 2410 00ed 0B       		.uleb128 0xb
 2411 00ee 00       		.byte	0
 2412 00ef 00       		.byte	0
 2413 00f0 0F       		.uleb128 0xf
 2414 00f1 34       		.uleb128 0x34
 2415 00f2 00       		.byte	0
 2416 00f3 03       		.uleb128 0x3
 2417 00f4 0E       		.uleb128 0xe
 2418 00f5 3A       		.uleb128 0x3a
 2419 00f6 0B       		.uleb128 0xb
 2420 00f7 3B       		.uleb128 0x3b
 2421 00f8 0B       		.uleb128 0xb
 2422 00f9 49       		.uleb128 0x49
 2423 00fa 13       		.uleb128 0x13
 2424 00fb 3F       		.uleb128 0x3f
ARM GAS  /tmp/ccwNEFwB.s 			page 51


 2425 00fc 0C       		.uleb128 0xc
 2426 00fd 02       		.uleb128 0x2
 2427 00fe 0A       		.uleb128 0xa
 2428 00ff 00       		.byte	0
 2429 0100 00       		.byte	0
 2430 0101 10       		.uleb128 0x10
 2431 0102 0F       		.uleb128 0xf
 2432 0103 00       		.byte	0
 2433 0104 0B       		.uleb128 0xb
 2434 0105 0B       		.uleb128 0xb
 2435 0106 49       		.uleb128 0x49
 2436 0107 13       		.uleb128 0x13
 2437 0108 00       		.byte	0
 2438 0109 00       		.byte	0
 2439 010a 11       		.uleb128 0x11
 2440 010b 35       		.uleb128 0x35
 2441 010c 00       		.byte	0
 2442 010d 49       		.uleb128 0x49
 2443 010e 13       		.uleb128 0x13
 2444 010f 00       		.byte	0
 2445 0110 00       		.byte	0
 2446 0111 00       		.byte	0
 2447              		.section	.debug_loc,"",%progbits
 2448              	.Ldebug_loc0:
 2449              	.LLST0:
 2450 0000 00000000 		.4byte	.LFB0-.Ltext0
 2451 0004 02000000 		.4byte	.LCFI0-.Ltext0
 2452 0008 0200     		.2byte	0x2
 2453 000a 7D       		.byte	0x7d
 2454 000b 00       		.sleb128 0
 2455 000c 02000000 		.4byte	.LCFI0-.Ltext0
 2456 0010 18000000 		.4byte	.LFE0-.Ltext0
 2457 0014 0200     		.2byte	0x2
 2458 0016 7D       		.byte	0x7d
 2459 0017 08       		.sleb128 8
 2460 0018 00000000 		.4byte	0
 2461 001c 00000000 		.4byte	0
 2462              	.LLST1:
 2463 0020 88000000 		.4byte	.LFB8-.Ltext0
 2464 0024 8A000000 		.4byte	.LCFI1-.Ltext0
 2465 0028 0200     		.2byte	0x2
 2466 002a 7D       		.byte	0x7d
 2467 002b 00       		.sleb128 0
 2468 002c 8A000000 		.4byte	.LCFI1-.Ltext0
 2469 0030 8C000000 		.4byte	.LCFI2-.Ltext0
 2470 0034 0200     		.2byte	0x2
 2471 0036 7D       		.byte	0x7d
 2472 0037 0C       		.sleb128 12
 2473 0038 8C000000 		.4byte	.LCFI2-.Ltext0
 2474 003c FE000000 		.4byte	.LFE8-.Ltext0
 2475 0040 0200     		.2byte	0x2
 2476 0042 7D       		.byte	0x7d
 2477 0043 30       		.sleb128 48
 2478 0044 00000000 		.4byte	0
 2479 0048 00000000 		.4byte	0
 2480              	.LLST2:
 2481 004c 00010000 		.4byte	.LFB9-.Ltext0
ARM GAS  /tmp/ccwNEFwB.s 			page 52


 2482 0050 02010000 		.4byte	.LCFI3-.Ltext0
 2483 0054 0200     		.2byte	0x2
 2484 0056 7D       		.byte	0x7d
 2485 0057 00       		.sleb128 0
 2486 0058 02010000 		.4byte	.LCFI3-.Ltext0
 2487 005c 04010000 		.4byte	.LCFI4-.Ltext0
 2488 0060 0200     		.2byte	0x2
 2489 0062 7D       		.byte	0x7d
 2490 0063 0C       		.sleb128 12
 2491 0064 04010000 		.4byte	.LCFI4-.Ltext0
 2492 0068 BC090000 		.4byte	.LFE9-.Ltext0
 2493 006c 0300     		.2byte	0x3
 2494 006e 7D       		.byte	0x7d
 2495 006f E000     		.sleb128 96
 2496 0071 00000000 		.4byte	0
 2497 0075 00000000 		.4byte	0
 2498              		.section	.debug_aranges,"",%progbits
 2499 0000 1C000000 		.4byte	0x1c
 2500 0004 0200     		.2byte	0x2
 2501 0006 00000000 		.4byte	.Ldebug_info0
 2502 000a 04       		.byte	0x4
 2503 000b 00       		.byte	0
 2504 000c 0000     		.2byte	0
 2505 000e 0000     		.2byte	0
 2506 0010 00000000 		.4byte	.Ltext0
 2507 0014 BC090000 		.4byte	.Letext0-.Ltext0
 2508 0018 00000000 		.4byte	0
 2509 001c 00000000 		.4byte	0
 2510              		.section	.debug_line,"",%progbits
 2511              	.Ldebug_line0:
 2512 0000 B6010000 		.section	.debug_str,"MS",%progbits,1
 2512      0200BF00 
 2512      00000201 
 2512      FB0E0D00 
 2512      01010101 
 2513              	.LASF28:
 2514 0000 636F6E6E 		.ascii	"connect_digits\000"
 2514      6563745F 
 2514      64696769 
 2514      747300
 2515              	.LASF2:
 2516 000f 73686F72 		.ascii	"short int\000"
 2516      7420696E 
 2516      7400
 2517              	.LASF48:
 2518 0019 73697A65 		.ascii	"sizetype\000"
 2518      74797065 
 2518      00
 2519              	.LASF56:
 2520 0022 77726974 		.ascii	"write_led\000"
 2520      655F6C65 
 2520      6400
 2521              	.LASF26:
 2522 002c 64696769 		.ascii	"digit0\000"
 2522      743000
 2523              	.LASF25:
 2524 0033 64696769 		.ascii	"digit1\000"
ARM GAS  /tmp/ccwNEFwB.s 			page 53


 2524      743100
 2525              	.LASF7:
 2526 003a 5F5F7569 		.ascii	"__uint32_t\000"
 2526      6E743332 
 2526      5F7400
 2527              	.LASF23:
 2528 0045 64696769 		.ascii	"digit3\000"
 2528      743300
 2529              	.LASF4:
 2530 004c 5F5F7569 		.ascii	"__uint16_t\000"
 2530      6E743136 
 2530      5F7400
 2531              	.LASF22:
 2532 0057 76616C75 		.ascii	"value\000"
 2532      6500
 2533              	.LASF32:
 2534 005d 6F646F6D 		.ascii	"odometer\000"
 2534      65746572 
 2534      00
 2535              	.LASF20:
 2536 0066 72656164 		.ascii	"read_nTrip\000"
 2536      5F6E5472 
 2536      697000
 2537              	.LASF12:
 2538 0071 75696E74 		.ascii	"uint8_t\000"
 2538      385F7400 
 2539              	.LASF38:
 2540 0079 73706565 		.ascii	"speedometer\000"
 2540      646F6D65 
 2540      74657200 
 2541              	.LASF39:
 2542 0085 666F726B 		.ascii	"fork_time\000"
 2542      5F74696D 
 2542      6500
 2543              	.LASF40:
 2544 008f 63616465 		.ascii	"cadence_meter\000"
 2544      6E63655F 
 2544      6D657465 
 2544      7200
 2545              	.LASF15:
 2546 009d 72656164 		.ascii	"read_nFork\000"
 2546      5F6E466F 
 2546      726B00
 2547              	.LASF9:
 2548 00a8 6C6F6E67 		.ascii	"long long int\000"
 2548      206C6F6E 
 2548      6720696E 
 2548      7400
 2549              	.LASF6:
 2550 00b6 6C6F6E67 		.ascii	"long int\000"
 2550      20696E74 
 2550      00
 2551              	.LASF19:
 2552 00bf 72656164 		.ascii	"read_nMode\000"
 2552      5F6E4D6F 
 2552      646500
 2553              	.LASF55:
ARM GAS  /tmp/ccwNEFwB.s 			page 54


 2554 00ca 2F686F6D 		.ascii	"/home/yz17g22/mydocuments/design/system_on_chip/git"
 2554      652F797A 
 2554      31376732 
 2554      322F6D79 
 2554      646F6375 
 2555 00fd 6875622F 		.ascii	"hub/local_chip/software\000"
 2555      6C6F6361 
 2555      6C5F6368 
 2555      69702F73 
 2555      6F667477 
 2556              	.LASF3:
 2557 0115 5F5F7569 		.ascii	"__uint8_t\000"
 2557      6E74385F 
 2557      7400
 2558              	.LASF54:
 2559 011f 636F6465 		.ascii	"code/main.c\000"
 2559      2F6D6169 
 2559      6E2E6300 
 2560              	.LASF42:
 2561 012b 64696769 		.ascii	"digits\000"
 2561      747300
 2562              	.LASF43:
 2563 0132 64696769 		.ascii	"digit_index\000"
 2563      745F696E 
 2563      64657800 
 2564              	.LASF16:
 2565 013e 72656164 		.ascii	"read_nCrank\000"
 2565      5F6E4372 
 2565      616E6B00 
 2566              	.LASF34:
 2567 014a 61636375 		.ascii	"accumulate_time\000"
 2567      6D756C61 
 2567      74655F74 
 2567      696D6500 
 2568              	.LASF36:
 2569 015a 61765F73 		.ascii	"av_ssni_419\000"
 2569      736E695F 
 2569      34313900 
 2570              	.LASF1:
 2571 0166 756E7369 		.ascii	"unsigned char\000"
 2571      676E6564 
 2571      20636861 
 2571      7200
 2572              	.LASF0:
 2573 0174 7369676E 		.ascii	"signed char\000"
 2573      65642063 
 2573      68617200 
 2574              	.LASF10:
 2575 0180 6C6F6E67 		.ascii	"long long unsigned int\000"
 2575      206C6F6E 
 2575      6720756E 
 2575      7369676E 
 2575      65642069 
 2576              	.LASF14:
 2577 0197 75696E74 		.ascii	"uint32_t\000"
 2577      33325F74 
 2577      00
ARM GAS  /tmp/ccwNEFwB.s 			page 55


 2578              	.LASF11:
 2579 01a0 756E7369 		.ascii	"unsigned int\000"
 2579      676E6564 
 2579      20696E74 
 2579      00
 2580              	.LASF13:
 2581 01ad 75696E74 		.ascii	"uint16_t\000"
 2581      31365F74 
 2581      00
 2582              	.LASF33:
 2583 01b6 74696D65 		.ascii	"time\000"
 2583      00
 2584              	.LASF5:
 2585 01bb 73686F72 		.ascii	"short unsigned int\000"
 2585      7420756E 
 2585      7369676E 
 2585      65642069 
 2585      6E7400
 2586              	.LASF29:
 2587 01ce 6D61696E 		.ascii	"main\000"
 2587      00
 2588              	.LASF49:
 2589 01d3 5F426F6F 		.ascii	"_Bool\000"
 2589      6C00
 2590              	.LASF51:
 2591 01d9 53454E53 		.ascii	"SENSORS_REGS\000"
 2591      4F52535F 
 2591      52454753 
 2591      00
 2592              	.LASF17:
 2593 01e6 72656164 		.ascii	"read_fork_cnt\000"
 2593      5F666F72 
 2593      6B5F636E 
 2593      7400
 2594              	.LASF35:
 2595 01f4 6D696E75 		.ascii	"minute\000"
 2595      746500
 2596              	.LASF44:
 2597 01fb 44697363 		.ascii	"DiscreteDisplay\000"
 2597      72657465 
 2597      44697370 
 2597      6C617900 
 2598              	.LASF8:
 2599 020b 6C6F6E67 		.ascii	"long unsigned int\000"
 2599      20756E73 
 2599      69676E65 
 2599      6420696E 
 2599      7400
 2600              	.LASF45:
 2601 021d 64697370 		.ascii	"display\000"
 2601      6C617900 
 2602              	.LASF27:
 2603 0225 6C65645F 		.ascii	"led_display\000"
 2603      64697370 
 2603      6C617900 
 2604              	.LASF52:
 2605 0231 4C45445F 		.ascii	"LED_REGS\000"
ARM GAS  /tmp/ccwNEFwB.s 			page 56


 2605      52454753 
 2605      00
 2606              	.LASF31:
 2607 023a 666F726B 		.ascii	"fork_counter\000"
 2607      5F636F75 
 2607      6E746572 
 2607      00
 2608              	.LASF21:
 2609 0247 72656164 		.ascii	"read_together_button\000"
 2609      5F746F67 
 2609      65746865 
 2609      725F6275 
 2609      74746F6E 
 2610              	.LASF37:
 2611 025c 6D61785F 		.ascii	"max_speed\000"
 2611      73706565 
 2611      6400
 2612              	.LASF50:
 2613 0266 42555454 		.ascii	"BUTTONS_REGS\000"
 2613      4F4E535F 
 2613      52454753 
 2613      00
 2614              	.LASF30:
 2615 0273 4D6F6465 		.ascii	"Mode\000"
 2615      00
 2616              	.LASF24:
 2617 0278 64696769 		.ascii	"digit2\000"
 2617      743200
 2618              	.LASF53:
 2619 027f 474E5520 		.ascii	"GNU C11 5.4.1 20160919 (release) [ARM/embedded-5-br"
 2619      43313120 
 2619      352E342E 
 2619      31203230 
 2619      31363039 
 2620 02b2 616E6368 		.ascii	"anch revision 240496] -mcpu=cortex-m0 -mthumb -gdwa"
 2620      20726576 
 2620      6973696F 
 2620      6E203234 
 2620      30343936 
 2621 02e5 72662D32 		.ascii	"rf-2 -O0 -fomit-frame-pointer\000"
 2621      202D4F30 
 2621      202D666F 
 2621      6D69742D 
 2621      6672616D 
 2622              	.LASF46:
 2623 0303 77656967 		.ascii	"weight\000"
 2623      687400
 2624              	.LASF41:
 2625 030a 63616C6F 		.ascii	"calorie\000"
 2625      72696500 
 2626              	.LASF18:
 2627 0312 72656164 		.ascii	"read_pedal_cnt\000"
 2627      5F706564 
 2627      616C5F63 
 2627      6E7400
 2628              	.LASF47:
 2629 0321 77686565 		.ascii	"wheel_size\000"
ARM GAS  /tmp/ccwNEFwB.s 			page 57


 2629      6C5F7369 
 2629      7A6500
 2630              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160919 (release) [ARM/embedded-5-bran
ARM GAS  /tmp/ccwNEFwB.s 			page 58


DEFINED SYMBOLS
                            *ABS*:00000000 main.c
     /tmp/ccwNEFwB.s:57     .data:00000000 BUTTONS_REGS
     /tmp/ccwNEFwB.s:54     .data:00000000 $d
     /tmp/ccwNEFwB.s:63     .data:00000004 SENSORS_REGS
     /tmp/ccwNEFwB.s:69     .data:00000008 LED_REGS
     /tmp/ccwNEFwB.s:72     .text:00000000 $t
     /tmp/ccwNEFwB.s:77     .text:00000000 write_led
     /tmp/ccwNEFwB.s:102    .text:00000014 $d
     /tmp/ccwNEFwB.s:106    .text:00000018 $t
     /tmp/ccwNEFwB.s:111    .text:00000018 read_nFork
     /tmp/ccwNEFwB.s:129    .text:00000024 $d
     /tmp/ccwNEFwB.s:133    .text:00000028 $t
     /tmp/ccwNEFwB.s:138    .text:00000028 read_nCrank
     /tmp/ccwNEFwB.s:157    .text:00000034 $d
     /tmp/ccwNEFwB.s:161    .text:00000038 $t
     /tmp/ccwNEFwB.s:166    .text:00000038 read_fork_cnt
     /tmp/ccwNEFwB.s:185    .text:00000044 $d
     /tmp/ccwNEFwB.s:189    .text:00000048 $t
     /tmp/ccwNEFwB.s:194    .text:00000048 read_pedal_cnt
     /tmp/ccwNEFwB.s:213    .text:00000054 $d
     /tmp/ccwNEFwB.s:217    .text:00000058 $t
     /tmp/ccwNEFwB.s:222    .text:00000058 read_nMode
     /tmp/ccwNEFwB.s:240    .text:00000064 $d
     /tmp/ccwNEFwB.s:244    .text:00000068 $t
     /tmp/ccwNEFwB.s:249    .text:00000068 read_nTrip
     /tmp/ccwNEFwB.s:268    .text:00000074 $d
     /tmp/ccwNEFwB.s:272    .text:00000078 $t
     /tmp/ccwNEFwB.s:277    .text:00000078 read_together_button
     /tmp/ccwNEFwB.s:296    .text:00000084 $d
     /tmp/ccwNEFwB.s:300    .text:00000088 $t
     /tmp/ccwNEFwB.s:305    .text:00000088 connect_digits
     /tmp/ccwNEFwB.s:397    .text:00000100 main
     /tmp/ccwNEFwB.s:581    .rodata:00000000 $d
     /tmp/ccwNEFwB.s:1058   .text:00000578 $d
     /tmp/ccwNEFwB.s:1061   .text:0000057c $t
     /tmp/ccwNEFwB.s:1653   .text:000009a0 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_uidivmod
__aeabi_uidiv
